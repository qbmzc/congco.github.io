<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>沐曦留曳</title>
  
  
  <link href="https://qbmzc.github.io/rss.xml" rel="self"/>
  
  <link href="https://qbmzc.github.io/"/>
  <updated>2025-01-14T10:41:15.107Z</updated>
  <id>https://qbmzc.github.io/</id>
  
  <author>
    <name>cong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 RestTemplate 下载文件</title>
    <link href="https://qbmzc.github.io/2025/01/14/2025/01/141123/"/>
    <id>https://qbmzc.github.io/2025/01/14/2025/01/141123/</id>
    <published>2025-01-13T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.107Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="RestTemplate-下载"><a href="#RestTemplate-下载" class="headerlink" title="RestTemplate 下载"></a>RestTemplate 下载</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(String fileUrl, String destinationPath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Downloading file &#123;&#125;,&#123;&#125;&quot;</span>, fileUrl, destinationPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义请求回调</span></span><br><span class="line">        <span class="type">RequestCallback</span> <span class="variable">requestCallback</span> <span class="operator">=</span> request -&gt; &#123;</span><br><span class="line">            <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> request.getHeaders();</span><br><span class="line">    headers.setAccept(Arrays.asList(MediaType.APPLICATION_OCTET_STREAM, MediaType.ALL));</span><br><span class="line">            headers.set(<span class="string">&quot;TM-Header-fs_internal&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">            restTemplate.execute(fileUrl, HttpMethod.GET, requestCallback, response -&gt; &#123;</span><br><span class="line">                FileUtils.copyInputStreamToFile(response.getBody(), <span class="keyword">new</span> <span class="title class_">File</span>(destinationPath));</span><br><span class="line">                log.info(<span class="string">&quot;文件下载成功：&#123;&#125;&quot;</span>, destinationPath);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="RetryTemplate-重试"><a href="#RetryTemplate-重试" class="headerlink" title="RetryTemplate 重试"></a>RetryTemplate 重试</h2><p>使用 <code>RetryTemplate</code> 包装重试逻辑，可以在网络不稳定或服务器临时故障时自动重试下载操作。以下是使用 <code>RetryTemplate</code> 实现重试逻辑的完整代码示例：</p><hr><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a><strong>1. 添加依赖</strong></h3><p>确保你的项目中已经引入了 <code>spring-retry</code> 依赖。如果使用 Maven，可以在 <code>pom.xml</code> 中添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-配置-RetryTemplate"><a href="#2-配置-RetryTemplate" class="headerlink" title="2. 配置 RetryTemplate"></a><strong>2. 配置 <code>RetryTemplate</code></strong></h3><p>在 Spring 配置类中定义 <code>RetryTemplate</code> Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.retry.backoff.FixedBackOffPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.retry.policy.SimpleRetryPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.retry.support.RetryTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetryConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RetryTemplate <span class="title function_">retryTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RetryTemplate</span> <span class="variable">retryTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RetryTemplate</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重试策略：最多重试 3 次</span></span><br><span class="line">        <span class="type">SimpleRetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRetryPolicy</span>();</span><br><span class="line">        retryPolicy.setMaxAttempts(<span class="number">3</span>);</span><br><span class="line">        retryTemplate.setRetryPolicy(retryPolicy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重试间隔：每次重试间隔 2 秒</span></span><br><span class="line">        <span class="type">FixedBackOffPolicy</span> <span class="variable">backOffPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FixedBackOffPolicy</span>();</span><br><span class="line">        backOffPolicy.setBackOffPeriod(<span class="number">2000</span>); <span class="comment">// 2 秒</span></span><br><span class="line">        retryTemplate.setBackOffPolicy(backOffPolicy);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retryTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-使用-RetryTemplate-包装下载逻辑"><a href="#3-使用-RetryTemplate-包装下载逻辑" class="headerlink" title="3. 使用 RetryTemplate 包装下载逻辑"></a><strong>3. 使用 <code>RetryTemplate</code> 包装下载逻辑</strong></h3><p>在你的 <code>downloadFile</code> 方法中，使用 <code>RetryTemplate</code> 包装下载逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.retry.support.RetryTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RequestCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDownloadService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RetryTemplate retryTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileDownloadService</span><span class="params">(RestTemplate restTemplate, RetryTemplate retryTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.restTemplate = restTemplate;</span><br><span class="line">        <span class="built_in">this</span>.retryTemplate = retryTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(String fileUrl, String destinationPath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Downloading file &#123;&#125;,&#123;&#125;&quot;</span>, fileUrl, destinationPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义请求回调</span></span><br><span class="line">        <span class="type">RequestCallback</span> <span class="variable">requestCallback</span> <span class="operator">=</span> request -&gt; &#123;</span><br><span class="line">            <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> request.getHeaders();</span><br><span class="line">            headers.setAccept(Arrays.asList(MediaType.APPLICATION_OCTET_STREAM, MediaType.ALL));</span><br><span class="line">            headers.set(<span class="string">&quot;TM-Header-fs_internal&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 RetryTemplate 包装下载逻辑</span></span><br><span class="line">        retryTemplate.execute(context -&gt; &#123;</span><br><span class="line">            restTemplate.execute(fileUrl, HttpMethod.GET, requestCallback, response -&gt; &#123;</span><br><span class="line">                FileUtils.copyInputStreamToFile(response.getBody(), <span class="keyword">new</span> <span class="title class_">File</span>(destinationPath));</span><br><span class="line">                log.info(<span class="string">&quot;文件下载成功：&#123;&#125;&quot;</span>, destinationPath);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 返回值为 null，因为 execute 方法不需要返回值</span></span><br><span class="line">        &#125;, context -&gt; &#123;</span><br><span class="line">            <span class="comment">// 重试失败后的回调</span></span><br><span class="line">            log.error(<span class="string">&quot;文件下载失败，重试次数用尽：&#123;&#125;&quot;</span>, fileUrl);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;文件下载失败，重试次数用尽&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-关键点说明"><a href="#4-关键点说明" class="headerlink" title="4. 关键点说明"></a><strong>4. 关键点说明</strong></h3><ol><li><p><strong>重试策略</strong>：</p><ul><li><code>SimpleRetryPolicy</code> 设置了最大重试次数为 3 次。</li><li>如果下载失败，会最多重试 3 次。</li></ul></li><li><p><strong>重试间隔</strong>：</p><ul><li><code>FixedBackOffPolicy</code> 设置了每次重试的间隔时间为 2 秒。</li></ul></li><li><p><strong>异常处理</strong>：</p><ul><li>如果重试次数用尽仍然失败，会抛出 <code>RuntimeException</code>，并记录错误日志。</li></ul></li><li><p>**<code>RetryTemplate.execute</code>**：</p><ul><li>第一个参数是重试逻辑（<code>RetryCallback</code>）。</li><li>第二个参数是重试失败后的回调（<code>RecoveryCallback</code>）。</li></ul></li></ol><hr><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a><strong>5. 测试</strong></h3><p>调用 <code>downloadFile</code> 方法时，如果下载失败，会自动重试 3 次，每次间隔 2 秒。如果重试次数用尽仍然失败，会抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FileDownloadService fileDownloadService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDownload</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileDownloadService.downloadFile(<span class="string">&quot;http://example.com/file.zip&quot;</span>, <span class="string">&quot;/path/to/destination/file.zip&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;文件下载失败&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="6-日志输出示例"><a href="#6-日志输出示例" class="headerlink" title="6. 日志输出示例"></a><strong>6. 日志输出示例</strong></h3><ul><li><p>下载成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  - Downloading file http://example.com/file.zip,/path/to/destination/file.zip</span><br><span class="line">INFO  - 文件下载成功：/path/to/destination/file.zip</span><br></pre></td></tr></table></figure></li><li><p>下载失败并重试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INFO  - Downloading file http://example.com/file.zip,/path/to/destination/file.zip</span><br><span class="line">WARN  - 文件下载失败，剩余重试次数：2</span><br><span class="line">INFO  - Downloading file http://example.com/file.zip,/path/to/destination/file.zip</span><br><span class="line">WARN  - 文件下载失败，剩余重试次数：1</span><br><span class="line">INFO  - Downloading file http://example.com/file.zip,/path/to/destination/file.zip</span><br><span class="line">ERROR - 文件下载失败，重试次数用尽：http://example.com/file.zip</span><br></pre></td></tr></table></figure></li></ul><hr><p>通过以上方法，你可以轻松地为文件下载逻辑添加重试机制，提高系统的健壮性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;RestTemplate-下载&quot;&gt;&lt;a href=&quot;#RestTemplate-下载&quot; class=&quot;headerlink&quot; title=&quot;RestTemplate 下载&quot;&gt;&lt;/a&gt;RestTemplate 下载&lt;</summary>
      
    
    
    
    <category term="Java" scheme="https://qbmzc.github.io/categories/Java/"/>
    
    
    <category term="spring" scheme="https://qbmzc.github.io/tags/spring/"/>
    
    <category term="file" scheme="https://qbmzc.github.io/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>azure推送docker镜像</title>
    <link href="https://qbmzc.github.io/2025/01/09/2025/01/091126/"/>
    <id>https://qbmzc.github.io/2025/01/09/2025/01/091126/</id>
    <published>2025-01-08T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.107Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul><li><strong>Azure 容器注册表</strong>-在 Azure 订阅中创建容器注册表</li><li><strong>docker cli</strong>-在本地安装 Docker</li></ul><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><ul><li>安装<code>azure-cli</code>命令行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arch paru</span></span><br><span class="line">paru azure-cli</span><br><span class="line"><span class="comment"># ubuntu/debian</span></span><br><span class="line">curl -L https://aka.ms/InstallAzureCli | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># MacOSX</span></span><br><span class="line">brew install azure-cli</span><br></pre></td></tr></table></figure></li><li>登录<a href="https://docs.azure.cn/zh-cn/">由世纪互联运营的 Microsoft Azure</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">az cloud <span class="built_in">set</span> -n AzureChinaCloud</span><br><span class="line">az login</span><br><span class="line"><span class="comment"># az cloud set -n AzureCloud   //means return to Public Azure.</span></span><br><span class="line">az acr login --name myregistry</span><br></pre></td></tr></table></figure></li><li>docker login 方式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意以cn结尾</span></span><br><span class="line">docker login myregistry.azurecr.cn</span><br></pre></td></tr></table></figure></li></ul><h2 id="拉取推送"><a href="#拉取推送" class="headerlink" title="拉取推送"></a>拉取推送</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line"># ## 创建映像的别名</span><br><span class="line">docker tag nginx myregistry.azurecr.cn/samples/nginx</span><br><span class="line"></span><br><span class="line"># ## 将映像推送到注册表</span><br><span class="line">docker push myregistry.azurecr.cn/samples/nginx</span><br><span class="line"></span><br><span class="line">## 从注册表中提取映像</span><br><span class="line">docker pull myregistry.azurecr.cn/samples/nginx</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://docs.azure.cn/zh-cn/container-registry/container-registry-get-started-docker-cli">推送和拉取镜像</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;先决条件&quot;&gt;&lt;a href=&quot;#先决条件&quot; class=&quot;headerlink&quot; title=&quot;先决条件&quot;&gt;&lt;/a&gt;先决条件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Azure 容器注册表&lt;/strong&gt;-在 </summary>
      
    
    
    
    <category term="Linux" scheme="https://qbmzc.github.io/categories/Linux/"/>
    
    
    <category term="docker" scheme="https://qbmzc.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用 Nginx 作为反向代理设置 Navidrome</title>
    <link href="https://qbmzc.github.io/2025/01/09/2025/01/091537/"/>
    <id>https://qbmzc.github.io/2025/01/09/2025/01/091537/</id>
    <published>2025-01-08T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.107Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Nginx 代理 Navidrome 是一个常见的部署场景，可以实现通过自定义域名或路径来访问 Navidrome 服务。以下是具体的步骤：</p><span id="more"></span><h2 id="1-安装-Navidrome"><a href="#1-安装-Navidrome" class="headerlink" title="1. 安装 Navidrome"></a><strong>1. 安装 Navidrome</strong></h2><p>确保 Navidrome 已经安装并运行。如果尚未安装，可以参考<a href="../../2024/12/121212">使用Navidrome构建个人音乐服务</a>或者官方文档 <a href="https://www.navidrome.org/docs/installation/">Navidrome Installation</a>。假设 Navidrome 在服务器的 localhost:4533 运行。</p><h2 id="2-安装并配置-Nginx"><a href="#2-安装并配置-Nginx" class="headerlink" title="2. 安装并配置 Nginx"></a><strong>2. 安装并配置 Nginx</strong></h2><p>如果尚未安装 Nginx，可以通过以下方式安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install nginx</span><br></pre></td></tr></table></figure><p>安装后，确保 Nginx 服务已启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h2 id="3-配置-Nginx-作为反向代理"><a href="#3-配置-Nginx-作为反向代理" class="headerlink" title="3. 配置 Nginx 作为反向代理"></a><strong>3. 配置 Nginx 作为反向代理</strong></h2><p><strong>配置文件路径</strong></p><p>Nginx 的配置文件通常位于 &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F; 或 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf。推荐在 sites-available 中创建一个单独的文件以便管理。</p><p>创建一个新的配置文件，例如 navidrome.conf：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/nginx/sites-available/navidrome.conf</span><br></pre></td></tr></table></figure><p><strong>配置内容</strong></p><p>假设你希望通过 music.example.com 访问 <code>Navidrome</code>，以下是一个基本的配置模板：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  server &#123;</span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    server_name music.example.com;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://localhost:4533;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line"></span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        _# WebSocket support_</span><br><span class="line"></span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>激活配置</strong></p><p>将配置链接到 sites-enabled 目录并重载 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /etc/nginx/sites-available/navidrome.conf /etc/nginx/sites-enabled/</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> nginx -t</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> systemctl reload nginx</span><br></pre></td></tr></table></figure><p><strong>4. 配置 HTTPS（可选但强烈推荐）</strong></p><p>使用 Let’s Encrypt 获取免费的 SSL 证书：</p><p>安装 Certbot：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install certbot python3-certbot-nginx</span><br></pre></td></tr></table></figure><p>获取证书并自动配置 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> certbot --nginx -d music.example.com</span><br></pre></td></tr></table></figure><p>证书续期可以通过以下命令测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> certbot renew --dry-run</span><br></pre></td></tr></table></figure><h2 id="5-访问-Navidrome"><a href="#5-访问-Navidrome" class="headerlink" title="5. 访问 Navidrome"></a><strong>5. 访问 Navidrome</strong></h2><p>现在，您应该能够通过 <a href="http://music.example.com/">http://music.example.com</a> 或 <a href="https://music.example.com/">https://music.example.com</a> 访问您的 Navidrome 实例。</p><h2 id="6-其他配置（可选）"><a href="#6-其他配置（可选）" class="headerlink" title="6. 其他配置（可选）"></a><strong>6. 其他配置（可选）</strong></h2><p>• <strong>Basic Authentication</strong></p><p>如果需要额外保护，可以在 Nginx 配置中添加 Basic Authentication。</p><p>• <strong>路径子目录配置</strong></p><p>如果希望通过子路径（如 &#x2F;music）访问 Navidrome，可将 location &#x2F; 替换为 location &#x2F;music&#x2F; 并设置 proxy_pass <a href="http://localhost:4533/">http://localhost:4533/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 Nginx 代理 Navidrome 是一个常见的部署场景，可以实现通过自定义域名或路径来访问 Navidrome 服务。以下是具体的步骤：&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://qbmzc.github.io/categories/Linux/"/>
    
    
    <category term="docker" scheme="https://qbmzc.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>在 Arch Linux 中切换到 LTS 内核</title>
    <link href="https://qbmzc.github.io/2025/01/03/2025/01/031227/"/>
    <id>https://qbmzc.github.io/2025/01/03/2025/01/031227/</id>
    <published>2025-01-02T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.107Z</updated>
    
    <content type="html"><![CDATA[<p>在 Arch Linux 中切换到 LTS 内核</p><span id="more"></span><h2 id="1-安装-LTS-内核"><a href="#1-安装-LTS-内核" class="headerlink" title="1. 安装 LTS 内核"></a><strong>1. 安装 LTS 内核</strong></h2><p>Arch Linux 的 LTS 内核包名为 linux-lts，可以直接通过 Pacman 包管理器安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S linux-lts</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 如果你使用的是 NVIDIA 专有驱动或其他与内核相关的模块，也需要同时安装与 LTS 内核匹配的模块，例如 nvidia-lts。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S nvidia-lts</span><br></pre></td></tr></table></figure><h2 id="2-检查是否需要-LTS-内核头文件"><a href="#2-检查是否需要-LTS-内核头文件" class="headerlink" title="2. 检查是否需要 LTS 内核头文件"></a><strong>2. 检查是否需要 LTS 内核头文件</strong></h2><p>如果你需要编译第三方模块（如 VirtualBox 或 VMware 驱动），还需要安装 LTS 内核的头文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S linux-lts-headers</span><br></pre></td></tr></table></figure><h2 id="3-更新启动引导（GRUB）"><a href="#3-更新启动引导（GRUB）" class="headerlink" title="3. 更新启动引导（GRUB）"></a><strong>3. 更新启动引导（GRUB）</strong></h2><p>安装 LTS 内核后，更新 GRUB 配置文件以添加 LTS 内核选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h2 id="4-设置默认启动的内核（可选）"><a href="#4-设置默认启动的内核（可选）" class="headerlink" title="4. 设置默认启动的内核（可选）"></a><strong>4. 设置默认启动的内核（可选）</strong></h2><p>如果希望默认使用 LTS 内核，需要调整 GRUB 的启动顺序：</p><ol><li>查看当前的 GRUB 启动项：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>重启系统，并观察 LTS 内核的启动项编号（从 0 开始）。</p><ol start="2"><li>编辑 GRUB 配置文件：</li></ol><p>sudo nano &#x2F;etc&#x2F;default&#x2F;grub</p><p>找到以下行，并将 GRUB_DEFAULT 设置为对应的启动项编号：</p><p>GRUB_DEFAULT&#x3D;0</p><ol start="3"><li>保存后，重新生成 GRUB 配置：</li></ol><p>sudo grub-mkconfig -o &#x2F;boot&#x2F;grub&#x2F;grub.cfg</p><h2 id="5-重启系统"><a href="#5-重启系统" class="headerlink" title="5. 重启系统"></a><strong>5. 重启系统</strong></h2><p>完成后，重启系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure><p>启动时，你可以选择 Advanced options for Arch Linux，然后选择 LTS 内核进行启动。</p><h2 id="6-验证运行的内核"><a href="#6-验证运行的内核" class="headerlink" title="6. 验证运行的内核"></a><strong>6. 验证运行的内核</strong></h2><p>重启后，使用以下命令确认系统是否运行的是 LTS 内核：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure><p>输出类似于以下内容表明你已经切换到 LTS 内核：</p><p>6.6.68-1-lts</p><h2 id="7-移除旧内核（可选）"><a href="#7-移除旧内核（可选）" class="headerlink" title="7. 移除旧内核（可选）"></a><strong>7. 移除旧内核（可选）</strong></h2><p>如果确认 LTS 内核工作正常，可以选择移除旧的 stable 内核：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -R linux</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 不要在未确认 LTS 内核工作正常的情况下移除旧内核。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 Arch Linux 中切换到 LTS 内核&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://qbmzc.github.io/categories/Linux/"/>
    
    
    <category term="linux" scheme="https://qbmzc.github.io/tags/linux/"/>
    
    <category term="ArchLinux" scheme="https://qbmzc.github.io/tags/ArchLinux/"/>
    
  </entry>
  
  <entry>
    <title>按照时间清理文件夹</title>
    <link href="https://qbmzc.github.io/2025/01/03/2025/01/031228/"/>
    <id>https://qbmzc.github.io/2025/01/03/2025/01/031228/</id>
    <published>2025-01-02T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.107Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录根路径，可根据实际情况修改，比如 /data 或 /var/www 等</span></span><br><span class="line">BASE_DIR=<span class="string">&quot;/taimei/default&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要排除的路径关键字，一般是绝对路径或子路径，这里用通配排除包含resources的路径</span></span><br><span class="line">EXCLUDE=<span class="string">&quot;*/resources/*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期阈值</span></span><br><span class="line">DATE_THRESHOLD=<span class="string">&quot;2023-01-01&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;即将删除以下文件：&quot;</span></span><br><span class="line">find <span class="string">&quot;<span class="variable">$BASE_DIR</span>&quot;</span> \</span><br><span class="line">  -<span class="built_in">type</span> f \</span><br><span class="line">  -not -path <span class="string">&quot;<span class="variable">$EXCLUDE</span>&quot;</span> \</span><br><span class="line">  -not -newermt <span class="string">&quot;<span class="variable">$DATE_THRESHOLD</span>&quot;</span> \</span><br><span class="line">  -<span class="built_in">print</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果确认无误，再执行删除（请先手动检查上面输出的文件列表）</span></span><br><span class="line"><span class="comment"># find &quot;$BASE_DIR&quot; \</span></span><br><span class="line"><span class="comment">#   -type f \</span></span><br><span class="line"><span class="comment">#   -not -path &quot;$EXCLUDE&quot; \</span></span><br><span class="line"><span class="comment">#   -not -newermt &quot;$DATE_THRESHOLD&quot; \</span></span><br><span class="line"><span class="comment">#   -exec rm -f &#123;&#125; \;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p><a href="https://gist.github.com/qbmzc/d9a4a1b5e895bb1cabab9d51d41a2974">gist-clean</a></p><h2 id="python清理脚本"><a href="#python清理脚本" class="headerlink" title="python清理脚本"></a>python清理脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3  </span></span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"><span class="keyword">import</span> datetime  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shutil  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 配置部分  </span></span><br><span class="line">BASE_DIR = <span class="string">&quot;/taimei&quot;</span>  </span><br><span class="line">EXCLUDE_KEYWORD = <span class="string">&quot;resources&quot;</span>  </span><br><span class="line">DATE_THRESHOLD = datetime.datetime(<span class="number">2024</span>, <span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 2023-01-01  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_excluded</span>(<span class="params">path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:  </span><br><span class="line">    <span class="comment"># 判断是否包含 resources 目录或关键字  </span></span><br><span class="line">    <span class="keyword">return</span> EXCLUDE_KEYWORD <span class="keyword">in</span> path  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():  </span><br><span class="line">    <span class="comment"># 将阈值转换为时间戳  </span></span><br><span class="line">    date_threshold_ts = time.mktime(DATE_THRESHOLD.timetuple())  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(BASE_DIR):  </span><br><span class="line">        <span class="comment"># 如果路径包含 resources，则跳过  </span></span><br><span class="line">        <span class="keyword">if</span> EXCLUDE_KEYWORD <span class="keyword">in</span> root:  </span><br><span class="line">            <span class="keyword">continue</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:  </span><br><span class="line">            file_path = os.path.join(root, f)  </span><br><span class="line">            <span class="comment"># 获取文件修改时间戳  </span></span><br><span class="line">            mtime = os.path.getmtime(file_path)  </span><br><span class="line">  </span><br><span class="line">            <span class="comment"># 判断是否在阈值之前  </span></span><br><span class="line">            <span class="keyword">if</span> mtime &lt; date_threshold_ts:  </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;即将删除文件: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)  </span><br><span class="line">                <span class="comment"># shutil.os.remove(file_path)  </span></span><br><span class="line">                <span class="comment"># 或者直接用 os.remove(file_path)  </span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="work" scheme="https://qbmzc.github.io/categories/work/"/>
    
    
    <category term="linux" scheme="https://qbmzc.github.io/tags/linux/"/>
    
    <category term="file" scheme="https://qbmzc.github.io/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>Linux 文件名超限处理</title>
    <link href="https://qbmzc.github.io/2025/01/03/2025/01/031229/"/>
    <id>https://qbmzc.github.io/2025/01/03/2025/01/031229/</id>
    <published>2025-01-02T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.107Z</updated>
    
    <content type="html"><![CDATA[<p>在大多数常见的 Linux 文件系统（如 ext4、xfs 等）上，单个文件名（不含路径）通常限制在 255 个字节（并非字符）之内。如果尝试创建超过 255 字节长度的文件名，就会遇到“File name too long”等错误。要解决或规避这个问题，可以从以下几个方面入手：</p><p><strong>1. 文件名本身缩短&#x2F;重命名</strong></p><p>• <strong>最简单直接</strong>的方式就是在应用层面或脚本中，提前避免产生过长文件名。</p><p>• 如果文件名是自动生成的，可以在生成逻辑里进行截断或编码（如 MD5&#x2F;SHA 等哈希）来保证文件名长度不会过长。</p><p><strong>2. 利用目录结构减少文件名长度</strong></p><p>• 如果是因为路径 + 文件名整体过长，可以通过将文件放到<strong>更深或更浅层级</strong>的目录，或者将路径层级拆分&#x2F;简化，从而缩短实际文件名在该目录下的长度。</p><p>• 某些情况下，也可以使用<strong>软链接（Symbolic Link）</strong>来将长路径“分割”，从而让实际操作的路径变短。</p><p><strong>3. 更换文件系统（不常用，且有兼容性风险）</strong></p><p>大多数主流文件系统（ext4、XFS、Btrfs 等）依然使用 255 字节的文件名限制。如果确实有非常特殊的需求，需要更长的文件名，可以考虑以下思路：</p><ol><li><p><strong>网络文件系统</strong>：例如一些分布式&#x2F;网络文件系统（NFS、CIFS 等）可能在协议层面对文件名长度有不同要求，但这通常依赖服务端&#x2F;客户端的实现及协议版本，不一定能无限增加长度。</p></li><li><p><strong>特定的 FUSE 文件系统或特殊文件系统</strong>：例如部分 FUSE 文件系统可能实现了更复杂的文件名映射机制。但是这类方案往往不够通用，且可能对性能、兼容性有影响。</p></li></ol><p><strong>4. 使用压缩包&#x2F;归档等方式进行存储</strong></p><p>如果只是需要以某种形式保存数据，而不是直接以超长文件名形式对外暴露，可以考虑：</p><p>• 将超长文件名作为一种“元数据”，附加在文件内部或另存为记录；</p><p>• <strong>打包&#x2F;压缩</strong>文件，不再直接以超长文件名形式放在文件系统中；</p><p>• 使用<strong>数据库</strong>或对象存储（S3、OSS 等），将文件内容以对象方式保存，把原本的“超长文件名”当作对象关键字或数据库字段存储。</p><p><strong>5. 软件层面对文件名做特殊映射</strong></p><p>有时需要兼容某些应用程序内部对超长文件名的处理，可以考虑：</p><p>• 在应用层，自动将文件名与一个唯一标识（UUID&#x2F;哈希）做映射；</p><p>• 在文件系统中落地时只存储短文件名（如哈希），再在数据库&#x2F;元数据中保存实际的完整名字。</p><p>• 访问时，先根据短文件名或者哈希查找映射关系，再显示或恢复出完整名字给用户或程序使用。</p><p><strong>小结</strong></p><p>• <strong>Linux 上常见的本地文件系统（ext4 等）本身对单个文件名的限制是 255 字节，无法直接突破。</strong></p><p>• <strong>最简单的做法是减少文件名长度</strong>，或通过<strong>软链接</strong>、变更<strong>目录层级</strong>、改用<strong>数据库&#x2F;对象存储</strong>等方式来绕过限制。</p><p>• 如果对超长文件名有非常特殊的、不可避免的需求，需考虑更换或开发特殊的文件系统或存储方案，但这往往会带来兼容性和管理的复杂度。</p><p>综上，除非有极为特殊的场景，大多数情况下都会通过<strong>限制或优化文件命名</strong>的方式来解决超长文件名的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在大多数常见的 Linux 文件系统（如 ext4、xfs 等）上，单个文件名（不含路径）通常限制在 255 个字节（并非字符）之内。如果尝试创建超过 255 字节长度的文件名，就会遇到“File name too long”等错误。要解决或规避这个问题，可以从以下几个方面</summary>
      
    
    
    
    <category term="Linux" scheme="https://qbmzc.github.io/categories/Linux/"/>
    
    
    <category term="file" scheme="https://qbmzc.github.io/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>2024总结</title>
    <link href="https://qbmzc.github.io/2024/12/31/2024/12/311020/"/>
    <id>https://qbmzc.github.io/2024/12/31/2024/12/311020/</id>
    <published>2024-12-30T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.106Z</updated>
    
    <content type="html"><![CDATA[<p>2024年即将结束，这一年对我而言充满了挑战与收获，也让我对生活和工作的平衡有了更深刻的体会。</p><h2 id="一、工作总结"><a href="#一、工作总结" class="headerlink" title="一、工作总结"></a><strong>一、工作总结</strong></h2><ol><li><strong>加入新项目组</strong></li></ol><p>年初加入了新的项目组，项目进展紧张，工期压力大，基本每周都处于加班的状态。在这种高强度的工作环境下，我逐渐提升了对任务优先级的判断能力和解决问题的效率。尽管加班较多，但我尽力保证了工作的质量和进度，为项目的推进贡献了自己的力量。</p><ol start="2"><li><strong>面对公司的变动</strong></li></ol><p>在这一年里，公司经历了搬迁、上市、裁员等多重变化，整个环境充满了不确定性。同事的离职对团队也产生了一定影响，但我始终保持着乐观和适应的心态，努力稳定团队士气，并积极承担更多的责任。</p><p>在变化中学会了拥抱挑战，提升了自己对环境快速适应的能力。</p><ol start="3"><li><strong>专业技能提升</strong></li></ol><p>尽管工作忙碌，我依然抓住一些零碎时间，学习了与项目相关的新技术，为团队引入了一些解决方案，优化了开发流程。虽然自我感觉学习的时间还不够多，但这些提升让我更从容地应对工作中的挑战。</p><h2 id="二、生活总结"><a href="#二、生活总结" class="headerlink" title="二、生活总结"></a><strong>二、生活总结</strong></h2><ol><li><strong>家庭陪伴</strong></li></ol><p>因为加班较多，陪伴家人的时间较为有限。这一点让我深感遗憾，尤其是宝宝的成长快一年了，我错过了许多值得铭记的瞬间。</p><p>尽管如此，在节假日和周末，我依然尽量抽出时间，陪伴家人，参与宝宝的日常生活，见证了他从牙牙学语到蹒跚学步的点滴成长，这也是我今年最大的幸福来源。</p><ol start="2"><li><strong>个人生活</strong></li></ol><p>由于工作繁忙和频繁的变化，今年没能坚持健身，体重持续增加，身体状态不如以往，这也让我更加意识到健康管理的重要性。6月份回家探望了家人，也和朋友一起去了崇明岛，这些片段让我感受到短暂的放松与生活的美好。</p><h2 id="三、个人成长与反思"><a href="#三、个人成长与反思" class="headerlink" title="三、个人成长与反思"></a><strong>三、个人成长与反思</strong></h2><ol><li><strong>关于自我提升</strong></li></ol><p>忙碌的工作让我一度陷入机械的状态，思考和自我提升的时间被大幅压缩。缺乏锻炼也让我精力不足，效率下降。这些问题值得我在来年认真反思并改善。</p><ol start="2"><li><strong>关于生活的平衡</strong></li></ol><p>这一年，我深刻体会到生活和工作的平衡有多重要。再忙的工作也不能忽视陪伴家人，忽视自己的身体健康。宝宝的成长只有一次，我需要用心去参与，而不仅仅是旁观。</p><h2 id="四、2025年的展望"><a href="#四、2025年的展望" class="headerlink" title="四、2025年的展望"></a><strong>四、2025年的展望</strong></h2><ol><li><strong>重新拾起健身</strong></li></ol><p>健康是工作和生活的基石，2025年计划重新制定健身目标，合理规划时间，每周至少锻炼三次，逐步恢复体能和健康。</p><ol start="2"><li><strong>学习与成长</strong></li></ol><p>工作中将继续学习新技术，并尝试参与更具有挑战性的项目；同时，每月阅读一本书或参加线上课程，补充自己的知识体系。</p><ol start="3"><li><strong>陪伴家人</strong></li></ol><p>在忙碌的工作中抽出更多时间陪伴家人，记录宝宝的成长，与家人一起创造更多美好的回忆。</p><ol start="4"><li><strong>生活质量提升</strong></li></ol><p>尝试用更有效的时间管理方式，提高工作效率，为自己的兴趣爱好腾出时间，增加生活的丰富性和幸福感。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h2><p>2024年是充满变化和挑战的一年，同时也让我更加明确了自己生活中的优先级。面对过去忙碌而略显遗憾的一年，我将在2025年做出调整，不仅要在工作中继续精进，还要让生活更有温度、让自己更加从容地面对每一天。</p><p>新的年轮即将开启，愿未来更加精彩！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2024年即将结束，这一年对我而言充满了挑战与收获，也让我对生活和工作的平衡有了更深刻的体会。&lt;/p&gt;
&lt;h2 id=&quot;一、工作总结&quot;&gt;&lt;a href=&quot;#一、工作总结&quot; class=&quot;headerlink&quot; title=&quot;一、工作总结&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、工作总</summary>
      
    
    
    
    <category term="congco" scheme="https://qbmzc.github.io/categories/congco/"/>
    
    
    <category term="daily" scheme="https://qbmzc.github.io/tags/daily/"/>
    
  </entry>
  
  <entry>
    <title>docker使用rclone挂载S3</title>
    <link href="https://qbmzc.github.io/2024/12/24/2024/12/241018/"/>
    <id>https://qbmzc.github.io/2024/12/24/2024/12/241018/</id>
    <published>2024-12-23T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rcloneu5:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rclonemount</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rclone/rclone</span></span><br><span class="line">    <span class="attr">user:</span> <span class="number">1000</span><span class="string">:1000</span></span><br><span class="line">    <span class="attr">devices:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dev/fuse</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYS_ADMIN</span></span><br><span class="line">    <span class="attr">security_opt:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">apparmor:unconfined</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/group:/etc/group:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/passwd:/etc/passwd:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/rclone/rclone.conf:/home/cong/.rclone.conf:ro</span> <span class="comment">#与配置的user保持目录一致</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">./data</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/data</span></span><br><span class="line">        <span class="attr">bind:</span></span><br><span class="line">          <span class="attr">propagation:</span> <span class="string">rshared</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mount</span> <span class="string">my-oss:/test-fsservice/CONG</span> <span class="string">/data</span> <span class="string">--allow-other</span> <span class="string">--allow-non-empty</span></span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>其他需要挂载当前目录的容器,需要同样的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line"><span class="attr">source:</span> <span class="string">./data</span></span><br><span class="line"><span class="attr">target:</span> <span class="string">/data</span></span><br><span class="line"><span class="attr">bind:</span></span><br><span class="line">  <span class="attr">propagation:</span> <span class="string">rshared</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker-compose&quot;&gt;&lt;a href=&quot;#docker-compose&quot; class=&quot;headerlink&quot; title=&quot;docker-compose&quot;&gt;&lt;/a&gt;docker-compose&lt;/h2&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="Linux" scheme="https://qbmzc.github.io/categories/Linux/"/>
    
    
    <category term="docker" scheme="https://qbmzc.github.io/tags/docker/"/>
    
    <category term="s3" scheme="https://qbmzc.github.io/tags/s3/"/>
    
  </entry>
  
  <entry>
    <title>挂载对象存储为本地磁盘</title>
    <link href="https://qbmzc.github.io/2024/12/23/2024/12/231427/"/>
    <id>https://qbmzc.github.io/2024/12/23/2024/12/231427/</id>
    <published>2024-12-22T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="s3fs挂载"><a href="#s3fs挂载" class="headerlink" title="s3fs挂载"></a>s3fs挂载</h2><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install -y s3fs</span><br></pre></td></tr></table></figure></li><li><p><strong>设置 AWS 凭据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个文件 /etc/passwd-s3fs，内容为：</span></span><br><span class="line">&lt;AWS_ACCESS_KEY_ID&gt;:&lt;AWS_SECRET_ACCESS_KEY&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 600 /etc/passwd-s3fs</span><br></pre></td></tr></table></figure></li><li><p><strong>挂载 S3 存储桶</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s3fs tm-fs-test:/music -o use_cache=/tmp -o allow_other -o uid=1001 -o mp_umask=002 -o multireq_max=5 -o url=https://s3.amazonaws.com /home/cong/Space/mys3bucket -o sigv4 -o dbglevel=info -f -o curldbg -o endpoint=us-west-2 -o passwd_file=/home/cong/.aws/passwd-s3fs</span><br></pre></td></tr></table></figure></li></ol><h2 id="rclone挂载-Linux"><a href="#rclone挂载-Linux" class="headerlink" title="rclone挂载(Linux)"></a>rclone挂载(Linux)</h2><ol><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://rclone.org/install.sh | <span class="built_in">sudo</span> bash</span><br></pre></td></tr></table></figure></li><li><strong>配置 S3 存储桶</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone config</span><br></pre></td></tr></table></figure></li></ol><p>• 选择 n 创建新配置。</p><p>• 提供一个名称（如 my-s3）。</p><p>• 选择 4 (Amazon S3)。</p><p>• 填写 AWS Access Key ID 和 AWS Secret Access Key。</p><p>• 根据需要选择存储桶区域和其他设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linux下需要fuse</span></span><br><span class="line"><span class="comment"># MacOSX对应需要macfuse</span></span><br><span class="line"><span class="comment"># win winfsp</span></span><br><span class="line"><span class="comment"># s3 tm-fs-test</span></span><br><span class="line">rclone mount my-s3:/tm-fs-test/music /home/cong/Space/mys3bucket --daemon</span><br><span class="line"></span><br><span class="line"><span class="comment"># test-fsservice</span></span><br><span class="line">rclone mount my-oss:/test-fsservice/CONG /home/cong/Space/oss --daemon</span><br></pre></td></tr></table></figure><h2 id="rclone-常用操作"><a href="#rclone-常用操作" class="headerlink" title="rclone 常用操作"></a>rclone 常用操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">rclone config - 以控制会话的形式添加rclone的配置，配置保存在.rclone.conf文件中。</span><br><span class="line">rclone copy - 将文件从源复制到目的地址，跳过已复制完成的。</span><br><span class="line">rclone <span class="built_in">sync</span> - 将源数据同步到目的地址，只更新目的地址的数据。   –dry-run标志来检查要复制、删除的数据</span><br><span class="line">rclone move - 将源数据移动到目的地址。</span><br><span class="line">rclone delete - 删除指定路径下的文件内容。</span><br><span class="line">rclone purge - 清空指定路径下所有文件数据。</span><br><span class="line">rclone <span class="built_in">mkdir</span> - 创建一个新目录。</span><br><span class="line">rclone <span class="built_in">rmdir</span> - 删除空目录。</span><br><span class="line">rclone check - 检查源和目的地址数据是否匹配。</span><br><span class="line">rclone <span class="built_in">ls</span> - 列出指定路径下所有的文件以及文件大小和路径。</span><br><span class="line">rclone lsd - 列出指定路径下所有的目录/容器/桶。</span><br><span class="line">rclone lsl - 列出指定路径下所有文件以及修改时间、文件大小和路径。</span><br><span class="line">rclone <span class="built_in">md5sum</span> - 为指定路径下的所有文件产生一个<span class="built_in">md5sum</span>文件。</span><br><span class="line">rclone <span class="built_in">sha1sum</span> - 为指定路径下的所有文件产生一个<span class="built_in">sha1sum</span>文件。</span><br><span class="line">rclone size - 获取指定路径下，文件内容的总大小。.</span><br><span class="line">rclone version - 查看当前版本。</span><br><span class="line">rclone cleanup - 清空remote。</span><br><span class="line">rclone dedupe - 交互式查找重复文件，进行删除/重命名操作。</span><br><span class="line">rclone mount - 挂载云盘为本地硬盘</span><br><span class="line">fusermount -qzu LocalFolder  - 卸载挂载的云盘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://test-fsservice.oss-cn-shanghai.aliyuncs.com/fs/test/2024/202412231547503.jpeg" alt="Image"></p><h2 id="rclone-sync"><a href="#rclone-sync" class="headerlink" title="rclone sync"></a>rclone sync</h2><p>rclone sync 命令显示进度条。默认情况下，rclone 在终端运行时会显示实时的同步进度信息，包括文件传输的进度条。</p><p> <strong>确保输出中有进度条</strong>：</p><p>• 添加 -P 或 –progress 参数可以确保强制显示进度条，即使某些环境中默认没有进度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone <span class="built_in">sync</span> /source/path remote:/destination/path -P</span><br></pre></td></tr></table></figure><p>• 输出示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Transferred:       10.5 MiB / 100 GiB, 0%, 1.5 MiB/s, ETA 1h50m</span><br><span class="line"></span><br><span class="line">Checks:              100 / 100, 100%</span><br><span class="line"></span><br><span class="line">Transferred:           3 / 1000, 0%</span><br><span class="line"></span><br><span class="line">Elapsed <span class="keyword">time</span>:         10s</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">**详细日志模式**：</span><br><span class="line"></span><br><span class="line">• 如果需要更多的详细信息（包括每个文件的传输状态），可以使用 -v（verbose 模式）或 -vv（超详细模式）。</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">rclone <span class="built_in">sync</span> /source/path remote:/destination/path -P -v</span><br></pre></td></tr></table></figure><p> <strong>静默模式（无进度条）</strong>：</p><p>如果不想看到任何进度条，可以使用 –quiet（或 -q）参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone <span class="built_in">sync</span> /source/path remote:/destination/path --quiet</span><br></pre></td></tr></table></figure><h2 id="Win下挂载"><a href="#Win下挂载" class="headerlink" title="Win下挂载"></a>Win下挂载</h2><ul><li><a href="https://winfsp.dev/rel/">安装winfsp</a> 安装时需要开启dev模式<a href="https://github.com/winfsp/winfsp">github</a></li><li>安装rclone<br>Z</li></ul><h3 id="daemon-mode"><a href="#daemon-mode" class="headerlink" title="daemon mode"></a>daemon mode</h3><p><code>rclone</code> 在 Windows 平台上不支持守护进程模式（daemon mode），因此当你尝试在 Windows 上使用 <code>rclone mount</code> 命令时，会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2025/01/14 16:47:05 CRITICAL: Fatal error: daemon mode is not supported on the windows platform</span><br></pre></td></tr></table></figure><p>这是因为 <code>rclone mount</code> 在 Windows 上默认会尝试以守护进程模式运行，而 Windows 不支持这种模式。</p><hr><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a><strong>解决方法</strong></h3><h4 id="1-使用-no-console-参数"><a href="#1-使用-no-console-参数" class="headerlink" title="1. 使用 --no-console 参数"></a><strong>1. 使用 <code>--no-console</code> 参数</strong></h4><p>在 Windows 上运行 <code>rclone mount</code> 时，可以通过添加 <code>--no-console</code> 参数来避免守护进程模式。这个参数会阻止 <code>rclone</code> 尝试以守护进程模式运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone mount remote:path X: --no-console</span><br></pre></td></tr></table></figure><ul><li><code>remote:path</code>：你的远程存储配置和路径。</li><li><code>X:</code>：你想要挂载到的本地驱动器字母（例如 <code>X:</code>）。</li><li><code>--no-console</code>：避免守护进程模式。</li></ul><h4 id="2-使用-vfs-cache-mode-参数"><a href="#2-使用-vfs-cache-mode-参数" class="headerlink" title="2. 使用 --vfs-cache-mode 参数"></a><strong>2. 使用 <code>--vfs-cache-mode</code> 参数</strong></h4><p>如果你需要缓存功能，可以添加 <code>--vfs-cache-mode</code> 参数。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone mount remote:path X: --no-console --vfs-cache-mode full</span><br></pre></td></tr></table></figure><ul><li><code>--vfs-cache-mode full</code>：启用完整的缓存模式，适合频繁读写的场景。</li></ul><h4 id="3-使用-volname-参数（可选）"><a href="#3-使用-volname-参数（可选）" class="headerlink" title="3. 使用 --volname 参数（可选）"></a><strong>3. 使用 <code>--volname</code> 参数（可选）</strong></h4><p>你可以为挂载的驱动器指定一个名称，方便识别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone mount remote:path X: --no-console --volname <span class="string">&quot;MyCloudDrive&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>--volname &quot;MyCloudDrive&quot;</code>：将挂载的驱动器命名为 <code>MyCloudDrive</code>。</li></ul><h4 id="4-以普通模式运行"><a href="#4-以普通模式运行" class="headerlink" title="4. 以普通模式运行"></a><strong>4. 以普通模式运行</strong></h4><p>如果你不需要守护进程模式，可以直接运行 <code>rclone mount</code>，但需要保持命令行窗口打开，否则挂载会终止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone mount remote:path X:</span><br></pre></td></tr></table></figure><hr><h3 id="示例命令"><a href="#示例命令" class="headerlink" title="示例命令"></a><strong>示例命令</strong></h3><p>假设你的远程存储配置名为 <code>mydrive</code>，路径为 <code>Documents</code>，你想将其挂载到本地驱动器 <code>X:</code>，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone mount mydrive:Documents X: --no-console --vfs-cache-mode full --volname <span class="string">&quot;MyCloudDrive&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ol><li><p><strong>保持命令行窗口打开</strong>：</p><ul><li>在 Windows 上运行 <code>rclone mount</code> 时，必须保持命令行窗口打开。如果关闭窗口，挂载会终止。</li></ul></li><li><p><strong>使用任务计划程序（Task Scheduler）</strong>：</p><ul><li>如果你希望 <code>rclone mount</code> 在后台运行，可以使用 Windows 的任务计划程序来启动挂载命令。</li></ul></li><li><p><strong>使用第三方工具</strong>：</p><ul><li>你可以使用第三方工具（如 <code>nssm</code>）将 <code>rclone mount</code> 包装为 Windows 服务，从而实现后台运行。</li></ul></li></ol><hr><h3 id="使用-nssm-将-rclone-mount-包装为服务"><a href="#使用-nssm-将-rclone-mount-包装为服务" class="headerlink" title="使用 nssm 将 rclone mount 包装为服务"></a><strong>使用 <code>nssm</code> 将 <code>rclone mount</code> 包装为服务</strong></h3><p>如果你希望 <code>rclone mount</code> 在后台运行，可以按照以下步骤操作：</p><h4 id="1-下载-nssm"><a href="#1-下载-nssm" class="headerlink" title="1. 下载 nssm"></a><strong>1. 下载 <code>nssm</code></strong></h4><p>从 <a href="https://nssm.cc/">nssm 官网</a> 下载并解压 <code>nssm</code>。</p><h4 id="2-创建服务"><a href="#2-创建服务" class="headerlink" title="2. 创建服务"></a><strong>2. 创建服务</strong></h4><p>打开命令提示符（以管理员身份运行），然后执行以下命令：</p><p> <em><strong>管理员身份 配置文件需要复制到</strong></em><br> <code>C:\Windows\System32\config\systemprofile\AppData\Roaming\rclone\rclone.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nssm install RcloneMount</span><br></pre></td></tr></table></figure><p>在弹出的窗口中配置服务：</p><ul><li><strong>Path</strong>：<code>rclone.exe</code> 的完整路径（例如 <code>C:\rclone\rclone.exe</code>）。</li><li><strong>Startup directory</strong>：<code>rclone.exe</code> 所在的目录（例如 <code>C:\rclone</code>）。</li><li><strong>Arguments</strong>：<code>mount mydrive:Documents X: --no-console --vfs-cache-mode full</code>。</li></ul><p>点击 <code>Install service</code> 完成服务创建。</p><h4 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3. 启动服务"></a><strong>3. 启动服务</strong></h4><p>在命令提示符中运行以下命令启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nssm start RcloneMount</span><br></pre></td></tr></table></figure><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li>在 Windows 上使用 <code>rclone mount</code> 时，添加 <code>--no-console</code> 参数以避免守护进程模式。</li><li>如果需要后台运行，可以使用任务计划程序或 <code>nssm</code> 将 <code>rclone mount</code> 包装为服务。</li><li>保持命令行窗口打开，否则挂载会终止。</li></ul><p>通过以上方法，你可以在 Windows 上成功挂载远程存储。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;s3fs挂载&quot;&gt;&lt;a href=&quot;#s3fs挂载&quot; class=&quot;headerlink&quot; title=&quot;s3fs挂载&quot;&gt;&lt;/a&gt;s3fs挂载&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://qbmzc.github.io/categories/Linux/"/>
    
    
    <category term="AWS" scheme="https://qbmzc.github.io/tags/AWS/"/>
    
    <category term="s3" scheme="https://qbmzc.github.io/tags/s3/"/>
    
  </entry>
  
  <entry>
    <title>docker: &#39;buildx&#39; is not a docker command</title>
    <link href="https://qbmzc.github.io/2024/12/21/2024/12/211314/"/>
    <id>https://qbmzc.github.io/2024/12/21/2024/12/211314/</id>
    <published>2024-12-20T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>idea连接docker进行构建x构建镜像时，报了错：</p><p>ERROR: BuildKit is enabled but the buildx component is missing or broken.<br>       Install the buildx component to build images with BuildKit:<br>       <a href="https://docs.docker.com/go/buildx/">https://docs.docker.com/go/buildx/</a></p><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx install</span><br></pre></td></tr></table></figure><p>报错:docker: ‘buildx’ is not a docker command</p><p>当 docker 报错 buildx is not a docker command 时，通常意味着你的 Docker CLI 没有安装或未正确配置 buildx 插件。以下是解决该问题的步骤：</p><span id="more"></span><ol><li>检查 Docker 版本</li></ol><p>docker-buildx 是 Docker 的扩展功能，要求 Docker 的版本是 19.03 或更高。</p><p>运行以下命令检查版本：</p><p>docker version</p><p>如果 Docker 版本过低，请升级到最新版本。</p><p>升级 Docker（Mac）<br>    1.打开 Docker 官方网站。<br>    2.下载并安装最新版本的 Docker Desktop。<br>    3.安装完成后，重启终端并运行：</p><p>docker version</p><ol start="2"><li>检查 Buildx 是否已安装</li></ol><p>docker-buildx 是一个 CLI 插件，通常在 Docker Desktop（Mac）中自带。如果没有安装或配置错误，可以通过以下方式安装。</p><p>验证 Buildx 是否已存在</p><p>运行以下命令：</p><p>docker buildx version</p><pre><code>•如果输出 Buildx 版本信息，则插件已经安装。•如果显示 docker: &#39;buildx&#39; is not a docker command，请按照以下步骤安装。</code></pre><ol start="3"><li>安装 Buildx</li></ol><ul><li><a href="https://github.com/docker/buildx/releases">github-buildx</a></li></ul><p>手动安装 Buildx 插件<br>    1.创建插件目录：</p><p>mkdir -p ~&#x2F;.docker&#x2F;cli-plugins</p><pre><code>2.下载最新的 docker-buildx 二进制文件：</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Mac arm64 v0.19.3 其他版本架构可以从上面的链接获取</span></span><br><span class="line">curl -fsSL hhttps://github.com/docker/buildx/releases/download/v0.19.3/buildx-v0.19.3.darwin-arm64 -o ~/.docker/cli-plugins/docker-buildx</span><br><span class="line"><span class="comment"># 或者直接通过浏览器下载,然后移动文件位置</span></span><br><span class="line"><span class="comment"># 假设下载位置为Downloads</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> ~/Downloads/buildx-v0.19.3.darwin-arm64 ~/.docker/cli-plugins/docker-buildx</span><br></pre></td></tr></table></figure><pre><code>3.赋予执行权限：</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ~/.docker/cli-plugins/docker-buildx</span><br></pre></td></tr></table></figure><pre><code>4.验证安装：</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker buildx version</span><br><span class="line"><span class="comment"># 设置默认</span></span><br><span class="line">docker buildx install</span><br></pre></td></tr></table></figure><ol start="4"><li>配置 Buildx</li></ol><p>如果 Buildx 已安装，但还未配置 builder，需要初始化它。<br>    1.创建 Builder</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx create --name mybuilder --use</span><br></pre></td></tr></table></figure><pre><code>2.检查 Builder</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>如果看到类似以下内容，说明 Builder 配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NAME/NODE    DRIVER/ENDPOINT             STATUS   PLATFORMS</span><br><span class="line">mybuilder *  docker-container            running  linux/amd64, linux/arm64, linux/arm/v7</span><br><span class="line">default      docker                      inactive</span><br></pre></td></tr></table></figure><pre><code>3.启动 Builder</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx inspect --bootstrap</span><br></pre></td></tr></table></figure><ol start="5"><li>启用 BuildKit（可选）</li></ol><p>Buildx 是基于 Docker BuildKit 的，需要确保 BuildKit 已启用。</p><p>启用 BuildKit</p><p>运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DOCKER_BUILDKIT=1</span><br></pre></td></tr></table></figure><p>为了永久生效，可以将该环境变量写入 ~&#x2F;.zshrc 或 ~&#x2F;.bashrc：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export DOCKER_BUILDKIT=1&quot;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><ol start="6"><li>测试 Buildx</li></ol><p>运行以下命令测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx build --platform linux/amd64,linux/arm64 -t myimage:latest --push .</span><br></pre></td></tr></table></figure><p>如果 Buildx 工作正常，你将能够构建多平台镜像。</p><ol start="7"><li>常见问题及解决方法</li></ol><p>问题 1：docker buildx 命令仍然不可用<br>    •确保插件安装在正确的位置：~&#x2F;.docker&#x2F;cli-plugins&#x2F;。<br>    •确保文件权限正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ~/.docker/cli-plugins/docker-buildx</span><br></pre></td></tr></table></figure><p>问题 2：Docker CLI 没有识别插件<br>    •如果 CLI 未正确加载插件，请重启终端或重启 Docker Desktop。<br>    •检查环境变量是否设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>确保路径中包含 Docker 的安装目录（如 &#x2F;usr&#x2F;local&#x2F;bin）。</p><p>问题 3：Builder 状态为 Inactive<br>    •运行以下命令启动 Builder：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx inspect --bootstrap</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/docker/buildx">docker-buildx</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;idea连接docker进行构建x构建镜像时，报了错：&lt;/p&gt;
&lt;p&gt;ERROR: BuildKit is enabled but the buildx component is missing or broken.&lt;br&gt;       Install the buildx component to build images with BuildKit:&lt;br&gt;       &lt;a href=&quot;https://docs.docker.com/go/buildx/&quot;&gt;https://docs.docker.com/go/buildx/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后执行&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker buildx install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;报错:docker: ‘buildx’ is not a docker command&lt;/p&gt;
&lt;p&gt;当 docker 报错 buildx is not a docker command 时，通常意味着你的 Docker CLI 没有安装或未正确配置 buildx 插件。以下是解决该问题的步骤：&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://qbmzc.github.io/categories/Linux/"/>
    
    
    <category term="docker" scheme="https://qbmzc.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用 FFmpeg 从视频中截图</title>
    <link href="https://qbmzc.github.io/2024/12/20/2024/12/201432/"/>
    <id>https://qbmzc.github.io/2024/12/20/2024/12/201432/</id>
    <published>2024-12-19T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.106Z</updated>
    
    <content type="html"><![CDATA[<p>使用 FFmpeg 从视频中截图，可以通过简单的命令实现。这些步骤假设你已经安装了 FFmpeg。</p><p><strong>基本命令</strong></p><p>以下是一个从视频中截图的基本命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -ss 00:00:05 -vframes 1 output.jpg</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><p>• -i input.mp4：输入的视频文件。</p><p>• -ss 00:00:05：截图的时间点（这里为 5 秒）。</p><p>• -vframes 1：提取一帧。</p><p>• output.jpg：输出的截图文件名。</p><p><strong>高质量截图</strong></p><p>如果需要更高质量的截图，可以添加以下参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -ss 00:00:05 -vframes 1 -q:v 2 output.jpg</span><br></pre></td></tr></table></figure><p>• -q:v 2：控制输出质量，值越低质量越高（范围 2-31）。</p><p><strong>批量截图</strong></p><p>如果需要从视频中每隔一段时间截取一张图片：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf <span class="string">&quot;fps=1&quot;</span> output_%03d.jpg</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><p>• -vf “fps&#x3D;1”：每秒提取 1 帧。</p><p>• output_%03d.jpg：输出文件名，%03d 表示编号，例如 output_001.jpg，output_002.jpg。</p><p>你可以根据需求调整 fps 的值。</p><p><strong>指定分辨率截图</strong></p><p>如果需要调整截图分辨率，可以添加 -s 参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -ss 00:00:05 -vframes 1 -s 1920x1080 output.jpg</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><p>• -s 1920x1080：指定输出图片的分辨率为 1920x1080。</p><p><strong>带水印截图</strong></p><p>如果你需要在截图中加入水印：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -i watermark.png -filter_complex <span class="string">&quot;overlay=10:10&quot;</span> -ss 00:00:05 -vframes 1 output.jpg</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><p>• -i watermark.png：水印图片。</p><p>• overlay&#x3D;10:10：水印的位置，左上角距边缘 10px。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 FFmpeg 从视频中截图，可以通过简单的命令实现。这些步骤假设你已经安装了 FFmpeg。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下是一个从视频中截图的基本命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash</summary>
      
    
    
    
    <category term="Linux" scheme="https://qbmzc.github.io/categories/Linux/"/>
    
    
    <category term="ffmpeg" scheme="https://qbmzc.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>使用证书登陆docker</title>
    <link href="https://qbmzc.github.io/2024/12/16/2024/12/161725/"/>
    <id>https://qbmzc.github.io/2024/12/16/2024/12/161725/</id>
    <published>2024-12-15T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.106Z</updated>
    
    <content type="html"><![CDATA[<p>在 Docker 中使用证书进行身份验证和加密通信，可以显著提高 Docker 环境的安全性。通过配置 TLS（传输层安全性）证书，您可以确保 Docker 客户端与 Docker 守护进程（Daemon）之间的通信是加密的，并且只有经过授权的客户端才能访问 Docker 守护进程。</p><!-- more  --><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>Docker 使用 TLS 证书来实现以下安全功能：</p><ol><li><strong>加密通信</strong>：确保 Docker 客户端与 Docker 守护进程之间的通信是加密的，防止中间人攻击。</li><li><strong>身份验证</strong>：确保只有拥有有效证书的客户端可以访问 Docker 守护进程。</li><li><strong>授权</strong>：基于证书的身份验证，可以进一步细化权限控制。</li></ol><h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><h3 id="1-安装必要工具"><a href="#1-安装必要工具" class="headerlink" title="1. 安装必要工具"></a>1. 安装必要工具</h3><p>确保您的系统已安装以下工具：</p><ul><li><strong>OpenSSL</strong>：用于生成和管理 TLS 证书。</li><li><strong>Docker</strong>：确保已安装并运行最新版本的 Docker。</li></ul><h3 id="2-创建目录结构"><a href="#2-创建目录结构" class="headerlink" title="2. 创建目录结构"></a>2. 创建目录结构</h3><p>为管理证书和密钥，建议创建一个专用的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/docker-certs</span><br><span class="line"><span class="built_in">cd</span> ~/docker-certs</span><br></pre></td></tr></table></figure><h2 id="三、生成-TLS-证书"><a href="#三、生成-TLS-证书" class="headerlink" title="三、生成 TLS 证书"></a>三、生成 TLS 证书</h2><h3 id="1-生成-CA（证书颁发机构）证书"><a href="#1-生成-CA（证书颁发机构）证书" class="headerlink" title="1. 生成 CA（证书颁发机构）证书"></a>1. 生成 CA（证书颁发机构）证书</h3><p>CA 证书用于签发和验证其他证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成 CA 私钥</span></span><br><span class="line">openssl genrsa -aes256 -out ca-key.pem 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 CA 证书</span></span><br><span class="line">openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem</span><br></pre></td></tr></table></figure><p>在生成 CA 证书时，系统会提示您输入信息，如国家、组织等。</p><p><img src="http://test-fsservice.oss-cn-shanghai.aliyuncs.com/fs/test/2024/202412201457721.png" alt="image.png"></p><h3 id="2-生成-Docker-守护进程（服务器）证书"><a href="#2-生成-Docker-守护进程（服务器）证书" class="headerlink" title="2. 生成 Docker 守护进程（服务器）证书"></a>2. 生成 Docker 守护进程（服务器）证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成服务器私钥</span></span><br><span class="line">openssl genrsa -out server-key.pem 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成服务器证书签署请求（CSR）</span></span><br><span class="line">openssl req -subj <span class="string">&quot;/CN=192.168.72.5&quot;</span> -new -key server-key.pem -out server.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 CA 签署服务器证书</span></span><br><span class="line"><span class="built_in">echo</span> subjectAltName = DNS:192.168.72.5,IP:192.168.72.5 &gt; extfile.cnf</span><br><span class="line">openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> server.csr -CA ca.pem -CAkey ca-key.pem \</span><br><span class="line">  -CAcreateserial -out server-cert.pem -extfile extfile.cnf</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>将 <code>your-server-domain</code> 替换为您的服务器域名（例如 <code>docker.example.com</code>）。</li><li>将 <code>your-server-ip</code> 替换为服务器的实际 IP 地址。</li></ul><h3 id="3-生成-Docker-客户端证书"><a href="#3-生成-Docker-客户端证书" class="headerlink" title="3. 生成 Docker 客户端证书"></a>3. 生成 Docker 客户端证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成客户端私钥</span></span><br><span class="line">openssl genrsa -out key.pem 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成客户端证书签署请求（CSR）</span></span><br><span class="line">openssl req -subj <span class="string">&#x27;/CN=client&#x27;</span> -new -key key.pem -out client.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 CA 签署客户端证书</span></span><br><span class="line"><span class="built_in">echo</span> extendedKeyUsage = clientAuth &gt; extfile-client.cnf</span><br><span class="line">openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> client.csr -CA ca.pem -CAkey ca-key.pem \</span><br><span class="line">  -CAcreateserial -out cert.pem -extfile extfile-client.cnf</span><br></pre></td></tr></table></figure><h3 id="4-设置权限"><a href="#4-设置权限" class="headerlink" title="4. 设置权限"></a>4. 设置权限</h3><p>确保私钥文件的权限正确，以防止未经授权的访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -v 0400 ca-key.pem key.pem server-key.pem</span><br><span class="line"><span class="built_in">chmod</span> -v 0444 ca.pem server-cert.pem cert.pem</span><br></pre></td></tr></table></figure><h2 id="四、配置-Docker-守护进程使用-TLS"><a href="#四、配置-Docker-守护进程使用-TLS" class="headerlink" title="四、配置 Docker 守护进程使用 TLS"></a>四、配置 Docker 守护进程使用 TLS</h2><h3 id="1-移动证书文件"><a href="#1-移动证书文件" class="headerlink" title="1. 移动证书文件"></a>1. 移动证书文件</h3><p>将生成的证书和密钥文件移动到 Docker 守护进程可以访问的位置，例如 <code>/etc/docker/certs</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/docker/certs</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> ca.pem server-cert.pem server-key.pem /etc/docker/certs/</span><br></pre></td></tr></table></figure><h3 id="2-配置-Docker-守护进程"><a href="#2-配置-Docker-守护进程" class="headerlink" title="2. 配置 Docker 守护进程"></a>2. 配置 Docker 守护进程</h3><p>编辑 Docker 守护进程的启动配置文件，通常位于 <code>/etc/docker/daemon.json</code>。如果该文件不存在，可以创建它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tlsverify&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tlscacert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/etc/docker/certs/ca.pem&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tlscert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/etc/docker/certs/server-cert.pem&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tlskey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/etc/docker/certs/server-key.pem&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hosts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;tcp://0.0.0.0:2376&quot;</span><span class="punctuation">,</span> <span class="string">&quot;unix:///var/run/docker.sock&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li><code>tlsverify</code>: 启用 TLS 验证。</li><li><code>tlscacert</code>: CA 证书路径。</li><li><code>tlscert</code>: 服务器证书路径。</li><li><code>tlskey</code>: 服务器私钥路径。</li><li><code>hosts</code>: Docker 守护进程监听的地址。这里设置为监听所有网络接口的 2376 端口和本地的 Unix 套接字。</li></ul><h3 id="3-重启-Docker-服务"><a href="#3-重启-Docker-服务" class="headerlink" title="3. 重启 Docker 服务"></a>3. 重启 Docker 服务</h3><p>应用配置更改，重启 Docker 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="五、配置-Docker-客户端使用-TLS-证书"><a href="#五、配置-Docker-客户端使用-TLS-证书" class="headerlink" title="五、配置 Docker 客户端使用 TLS 证书"></a>五、配置 Docker 客户端使用 TLS 证书</h2><h3 id="1-移动客户端证书文件"><a href="#1-移动客户端证书文件" class="headerlink" title="1. 移动客户端证书文件"></a>1. 移动客户端证书文件</h3><p>将客户端证书和密钥文件（<code>ca.pem</code>、<code>cert.pem</code>、<code>key.pem</code>）移动到客户端机器的某个目录，例如 <code>~/.docker</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.docker</span><br><span class="line"><span class="built_in">cp</span> ~/docker-certs/ca.pem ~/.docker/</span><br><span class="line"><span class="built_in">cp</span> ~/docker-certs/cert.pem ~/.docker/</span><br><span class="line"><span class="built_in">cp</span> ~/docker-certs/key.pem ~/.docker/</span><br></pre></td></tr></table></figure><h3 id="2-设置环境变量"><a href="#2-设置环境变量" class="headerlink" title="2. 设置环境变量"></a>2. 设置环境变量</h3><p>在客户端机器上，设置以下环境变量以使用 TLS 连接到 Docker 守护进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DOCKER_HOST=tcp://192.168.72.5:2376</span><br><span class="line"><span class="built_in">export</span> DOCKER_TLS_VERIFY=1</span><br><span class="line"><span class="built_in">export</span> DOCKER_CERT_PATH=~/.docker</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li><code>DOCKER_HOST</code>: Docker 守护进程的地址，使用 <code>tcp</code> 协议和 2376 端口。</li><li><code>DOCKER_TLS_VERIFY</code>: 启用 TLS 验证。</li><li><code>DOCKER_CERT_PATH</code>: 客户端证书和密钥所在的路径。</li></ul><h3 id="3-验证连接"><a href="#3-验证连接" class="headerlink" title="3. 验证连接"></a>3. 验证连接</h3><p>使用以下命令验证客户端是否能成功连接到 Docker 守护进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>如果配置正确，您应该能看到客户端和服务器的 Docker 版本信息，而不会出现连接错误。</p><h2 id="六、使用-Docker-配置文件自动加载证书"><a href="#六、使用-Docker-配置文件自动加载证书" class="headerlink" title="六、使用 Docker 配置文件自动加载证书"></a>六、使用 Docker 配置文件自动加载证书</h2><p>为了简化每次使用 Docker 命令时设置环境变量的过程，您可以在客户端机器上配置 Docker 配置文件，使其自动加载 TLS 证书。</p><h3 id="1-创建或编辑-docker-config-json"><a href="#1-创建或编辑-docker-config-json" class="headerlink" title="1. 创建或编辑 ~/.docker/config.json"></a>1. 创建或编辑 <code>~/.docker/config.json</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.docker/config.json</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tlsverify&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tlscacert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/home/your-username/.docker/ca.pem&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tlscert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/home/your-username/.docker/cert.pem&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tlskey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/home/your-username/.docker/key.pem&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hosts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;tcp://your-server-domain:2376&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>将 <code>/home/your-username/.docker/</code> 替换为实际的路径。</li><li>将 <code>your-server-domain</code> 替换为 Docker 守护进程所在服务器的域名或 IP 地址。</li></ul><h3 id="2-使用-Docker-命令"><a href="#2-使用-Docker-命令" class="headerlink" title="2. 使用 Docker 命令"></a>2. 使用 Docker 命令</h3><p>现在，您可以直接使用 Docker 命令，而无需每次手动设置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h2 id="七、常见问题及解决方法"><a href="#七、常见问题及解决方法" class="headerlink" title="七、常见问题及解决方法"></a>七、常见问题及解决方法</h2><h3 id="1-证书无效或被拒绝"><a href="#1-证书无效或被拒绝" class="headerlink" title="1. 证书无效或被拒绝"></a>1. 证书无效或被拒绝</h3><p><strong>症状</strong>：</p><ul><li>错误信息类似于 <code>x509: certificate signed by unknown authority</code> 或 <code>certificate is not valid for host</code>.</li></ul><p><strong>解决方法</strong>：</p><ul><li>确保 Docker 守护进程和客户端使用的是同一个 CA 签发的证书。</li><li>检查 <code>subjectAltName</code> 是否正确配置，确保服务器域名和 IP 地址包含在证书的 <code>subjectAltName</code> 中。</li></ul><h3 id="2-Docker-守护进程未启动"><a href="#2-Docker-守护进程未启动" class="headerlink" title="2. Docker 守护进程未启动"></a>2. Docker 守护进程未启动</h3><p><strong>解决方法</strong>：</p><ul><li><p>检查 Docker 服务状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status docker</span><br></pre></td></tr></table></figure></li><li><p>查看 Docker 日志以获取更多信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> journalctl -u docker.service</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-权限问题"><a href="#3-权限问题" class="headerlink" title="3. 权限问题"></a>3. 权限问题</h3><p><strong>症状</strong>：</p><ul><li>无法访问证书文件，提示权限不足。</li></ul><p><strong>解决方法</strong>：</p><ul><li><p>确保证书文件的权限正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 0400 ~/.docker/key.pem</span><br><span class="line"><span class="built_in">chmod</span> 0444 ~/.docker/ca.pem ~/.docker/cert.pem</span><br></pre></td></tr></table></figure></li><li><p>确保当前用户有权访问证书文件所在的目录。</p></li></ul><h3 id="4-防火墙阻止端口"><a href="#4-防火墙阻止端口" class="headerlink" title="4. 防火墙阻止端口"></a>4. 防火墙阻止端口</h3><p><strong>症状</strong>：</p><ul><li>客户端无法连接到 Docker 守护进程，可能提示超时或连接被拒绝。</li></ul><p><strong>解决方法</strong>：</p><ul><li><p>检查服务器防火墙设置，确保 2376 端口开放：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ufw allow 2376/tcp</span><br></pre></td></tr></table></figure></li><li><p>如果使用其他防火墙工具，如 <code>iptables</code>，相应地添加规则。</p></li></ul><h3 id="5-使用不同主机名导致证书不匹配"><a href="#5-使用不同主机名导致证书不匹配" class="headerlink" title="5. 使用不同主机名导致证书不匹配"></a>5. 使用不同主机名导致证书不匹配</h3><p><strong>症状</strong>：</p><ul><li>证书的主机名与连接的主机名不匹配，导致验证失败。</li></ul><p><strong>解决方法</strong>：</p><ul><li>确保在生成服务器证书时，<code>CN</code> 和 <code>subjectAltName</code> 包含正确的主机名和 IP 地址。</li></ul><h2 id="八、示例：完整流程"><a href="#八、示例：完整流程" class="headerlink" title="八、示例：完整流程"></a>八、示例：完整流程</h2><p>以下是一个完整的示例流程，假设服务器域名为 <code>docker.example.com</code>(没有域名都使用IP)，IP 地址为 <code>192.168.1.100</code>。</p><h3 id="1-在服务器上生成-CA、服务器和客户端证书"><a href="#1-在服务器上生成-CA、服务器和客户端证书" class="headerlink" title="1. 在服务器上生成 CA、服务器和客户端证书"></a>1. 在服务器上生成 CA、服务器和客户端证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/docker-certs</span><br><span class="line"><span class="built_in">cd</span> ~/docker-certs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 CA 证书</span></span><br><span class="line">openssl genrsa -aes256 -out ca-key.pem 4096</span><br><span class="line">openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成服务器证书</span></span><br><span class="line">openssl genrsa -out server-key.pem 4096</span><br><span class="line">openssl req -subj <span class="string">&quot;/CN=docker.example.com&quot;</span> -new -key server-key.pem -out server.csr</span><br><span class="line"><span class="built_in">echo</span> subjectAltName = DNS:docker.example.com,IP:192.168.1.100 &gt; extfile.cnf</span><br><span class="line">openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> server.csr -CA ca.pem -CAkey ca-key.pem \</span><br><span class="line">  -CAcreateserial -out server-cert.pem -extfile extfile.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成客户端证书</span></span><br><span class="line">openssl genrsa -out key.pem 4096</span><br><span class="line">openssl req -subj <span class="string">&#x27;/CN=client&#x27;</span> -new -key key.pem -out client.csr</span><br><span class="line"><span class="built_in">echo</span> extendedKeyUsage = clientAuth &gt; extfile-client.cnf</span><br><span class="line">openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> client.csr -CA ca.pem -CAkey ca-key.pem \</span><br><span class="line">  -CAcreateserial -out cert.pem -extfile extfile-client.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line"><span class="built_in">chmod</span> 0400 ca-key.pem key.pem server-key.pem</span><br><span class="line"><span class="built_in">chmod</span> 0444 ca.pem server-cert.pem cert.pem</span><br></pre></td></tr></table></figure><h3 id="2-配置-Docker-守护进程-1"><a href="#2-配置-Docker-守护进程-1" class="headerlink" title="2. 配置 Docker 守护进程"></a>2. 配置 Docker 守护进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/docker/certs</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> ca.pem server-cert.pem server-key.pem /etc/docker/certs/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 /etc/docker/daemon.json</span></span><br><span class="line"><span class="built_in">sudo</span> nano /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tlsverify&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tlscacert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/etc/docker/certs/ca.pem&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tlscert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/etc/docker/certs/server-cert.pem&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tlskey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/etc/docker/certs/server-key.pem&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hosts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;tcp://0.0.0.0:2376&quot;</span><span class="punctuation">,</span> <span class="string">&quot;unix:///var/run/docker.sock&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-重启-Docker-服务-1"><a href="#3-重启-Docker-服务-1" class="headerlink" title="3. 重启 Docker 服务"></a>3. 重启 Docker 服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="4-在客户端配置证书"><a href="#4-在客户端配置证书" class="headerlink" title="4. 在客户端配置证书"></a>4. 在客户端配置证书</h3><p>将 <code>ca.pem</code>、<code>cert.pem</code> 和 <code>key.pem</code> 复制到客户端机器的 <code>~/.docker</code> 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.docker</span><br><span class="line">scp user@docker.example.com:~/.docker-certs/ca.pem ~/.docker/</span><br><span class="line">scp user@docker.example.com:~/.docker-certs/cert.pem ~/.docker/</span><br><span class="line">scp user@docker.example.com:~/.docker-certs/key.pem ~/.docker/</span><br></pre></td></tr></table></figure><h3 id="5-在客户端设置环境变量"><a href="#5-在客户端设置环境变量" class="headerlink" title="5. 在客户端设置环境变量"></a>5. 在客户端设置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DOCKER_HOST=tcp://ip:2376</span><br><span class="line"><span class="built_in">export</span> DOCKER_TLS_VERIFY=1</span><br><span class="line"><span class="built_in">export</span> DOCKER_CERT_PATH=~/.docker</span><br></pre></td></tr></table></figure><h3 id="6-验证连接"><a href="#6-验证连接" class="headerlink" title="6. 验证连接"></a>6. 验证连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>您应该能够看到 Docker 客户端和服务器的版本信息，表明连接成功。</p><h3 id="idea远程连接docker"><a href="#idea远程连接docker" class="headerlink" title="idea远程连接docker"></a>idea远程连接docker</h3><ul><li>配置url(注意https)以及证书所在文件夹</li></ul><p><img src="http://test-fsservice.oss-cn-shanghai.aliyuncs.com/fs/test/2024/202412201716847.png"></p><ul><li>buildx参考:<a href="211314.md">buildx</a></li></ul><h3 id="通过-curl-验证-Docker-连接"><a href="#通过-curl-验证-Docker-连接" class="headerlink" title="通过 curl 验证 Docker 连接"></a>通过 curl 验证 Docker 连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://ip:2376/info --cert ~/.docker/cert.pem --key ~/Users/cong~/.docker/key.pem --cacert ~/.docker/ca.pem</span><br></pre></td></tr></table></figure><h2 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h2><p>通过上述步骤，您可以为 Docker 环境配置 TLS 证书，实现安全的客户端和服务器通信。以下是关键要点：</p><ol><li><strong>生成和管理证书</strong>：使用 OpenSSL 生成 CA、服务器和客户端证书，确保证书的安全性和有效性。</li><li><strong>配置 Docker 守护进程</strong>：设置 Docker 守护进程使用 TLS 证书进行加密通信和身份验证。</li><li><strong>配置 Docker 客户端</strong>：确保客户端正确配置环境变量，以使用生成的证书安全连接到 Docker 守护进程。</li><li><strong>安全实践</strong>：妥善管理和保护证书和密钥文件，限制访问权限，定期更新和轮换证书。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Docker 中使用证书进行身份验证和加密通信，可以显著提高 Docker 环境的安全性。通过配置 TLS（传输层安全性）证书，您可以确保 Docker 客户端与 Docker 守护进程（Daemon）之间的通信是加密的，并且只有经过授权的客户端才能访问 Docker </summary>
      
    
    
    
    <category term="Linux" scheme="https://qbmzc.github.io/categories/Linux/"/>
    
    
    <category term="docker" scheme="https://qbmzc.github.io/tags/docker/"/>
    
    <category term="openssl" scheme="https://qbmzc.github.io/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>使用Navidrome构建个人音乐服务</title>
    <link href="https://qbmzc.github.io/2024/12/12/2024/12/121212/"/>
    <id>https://qbmzc.github.io/2024/12/12/2024/12/121212/</id>
    <published>2024-12-12T01:09:09.000Z</published>
    <updated>2025-01-14T10:41:15.106Z</updated>
    
    <content type="html"><![CDATA[<p>使用Navidrome构建个人音乐服务</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>首先，在服务器上安装docker。</li><li>安装docker-compose。</li><li>配置docker-compose.yaml。</li><li>启动容器 <code>docker-compose up -d</code>。</li></ol><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p> 需要一个音乐播放器</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p> 搭建一个音乐服务器，方便管理音乐。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>使用docker部署</li><li>音乐管理</li><li>音乐标签</li><li>音乐上传</li><li>各平台客户端</li></ol><h2 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h2><p>共享同一个音乐文件夹，方便管理。</p><h2 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h2><ol><li>docker</li><li>docker-compose 部署方式</li><li>navidrome 音乐服务器</li><li>music-tag 音乐标签+歌词+封面等</li><li>dufs 文件上传下载,也可以使用sftp或者rclone上传</li></ol><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">navidrome:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">deluan/navidrome:latest</span></span><br><span class="line">    <span class="attr">user:</span> <span class="number">1000</span><span class="string">:1000</span> <span class="comment"># should be owner of volumes</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4533:4533&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># Optional: put your config options customization here. Examples:</span></span><br><span class="line">      <span class="attr">ND_SCANSCHEDULE:</span> <span class="string">1h</span></span><br><span class="line">      <span class="attr">ND_LOGLEVEL:</span> <span class="string">info</span>  </span><br><span class="line">      <span class="attr">ND_SESSIONTIMEOUT:</span> <span class="string">24h</span></span><br><span class="line">      <span class="attr">ND_BASEURL:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data:/data&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./music:/music:ro&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">music-tag:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">xhongc/music_tag_web:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">music-tag-web</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8001:8001&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./music:/app/media:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config:/app/data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/start</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">du-fs:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sigoden/dufs:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">du-fs</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-A</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./music:/data:rw</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8002:5000&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="http://test-fsservice.oss-cn-shanghai.aliyuncs.com/fs/test/2024/202412121240550.png" alt="ND"></p><p><img src="http://test-fsservice.oss-cn-shanghai.aliyuncs.com/fs/test/2024/202412121241540.png" alt="music-tah"></p><p><img src="http://test-fsservice.oss-cn-shanghai.aliyuncs.com/fs/test/2024/202412121239820.png" alt="dufs"></p><p><img src="http://test-fsservice.oss-cn-shanghai.aliyuncs.com/fs/test/2024/202412121241516.png" alt="feishin"></p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>打开浏览器，输入ip:port，访问navidrome</li><li>登录，输入用户名密码</li><li>打开du-fs，上传音乐</li><li>打开music-tag，自动解析音乐标签默认帐号密码<code>admin/admin</code></li><li>打开navidrome，刷新目录</li></ol><h2 id="参考附录"><a href="#参考附录" class="headerlink" title="参考附录"></a>参考附录</h2><ul><li><a href="https://www.navidrome.org/">navidrome</a></li><li><a href="https://github.com/jeffvli/feishin">feishin</a></li><li><a href="https://github.com/xhongc/music-tag-web">music-tag</a></li><li><a href="https://github.com/sigoden/dufs">du-fs</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用Navidrome构建个人音乐服务&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://qbmzc.github.io/categories/Linux/"/>
    
    
    <category term="musix" scheme="https://qbmzc.github.io/tags/musix/"/>
    
  </entry>
  
  <entry>
    <title>构建一个基于Amazon S3存储的音乐播放器</title>
    <link href="https://qbmzc.github.io/2024/12/06/2024/12/061408/"/>
    <id>https://qbmzc.github.io/2024/12/06/2024/12/061408/</id>
    <published>2024-12-05T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.106Z</updated>
    
    <content type="html"><![CDATA[<p>将分别介绍如何使用 <strong>Vue.js</strong> 和 <strong>Spring Boot</strong> 构建一个基于Amazon S3存储的音乐播放器，以及如何使用 <strong>Rust</strong> 构建一个命令行式的播放程序。您可以根据项目需求和个人偏好选择合适的技术栈。</p><span id="more"></span><h2 id="选项一：使用-Vue-js-和-Spring-Boot-构建音乐播放器"><a href="#选项一：使用-Vue-js-和-Spring-Boot-构建音乐播放器" class="headerlink" title="选项一：使用 Vue.js 和 Spring Boot 构建音乐播放器"></a>选项一：使用 Vue.js 和 Spring Boot 构建音乐播放器</h2><h3 id="一、项目总体结构"><a href="#一、项目总体结构" class="headerlink" title="一、项目总体结构"></a>一、项目总体结构</h3><p>一个典型的 Vue.js 前端和 Spring Boot 后端的项目结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">music-player/</span><br><span class="line">├── backend/</span><br><span class="line">│   ├── src/</span><br><span class="line">│   │   ├── main/</span><br><span class="line">│   │   │   ├── java/</span><br><span class="line">│   │   │   └── resources/</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── ...</span><br><span class="line">├── frontend/</span><br><span class="line">│   ├── src/</span><br><span class="line">│   │   ├── components/</span><br><span class="line">│   │   ├── views/</span><br><span class="line">│   │   └── ...</span><br><span class="line">│   ├── public/</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   └── ...</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><h3 id="二、版本控制"><a href="#二、版本控制" class="headerlink" title="二、版本控制"></a>二、版本控制</h3><h4 id="1-初始化Git仓库"><a href="#1-初始化Git仓库" class="headerlink" title="1. 初始化Git仓库"></a>1. 初始化Git仓库</h4><p>在项目根目录下初始化Git仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h4 id="2-创建-gitignore"><a href="#2-创建-gitignore" class="headerlink" title="2. 创建 .gitignore"></a>2. 创建 <code>.gitignore</code></h4><p>在根目录下创建一个 <code>.gitignore</code> 文件，添加以下内容以忽略不必要的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Java</span><br><span class="line">/target/</span><br><span class="line">/*.class</span><br><span class="line"></span><br><span class="line"># Maven</span><br><span class="line">/.mvn/</span><br><span class="line">/!.mvn/wrapper/maven-wrapper.jar</span><br><span class="line"></span><br><span class="line"># Node.js</span><br><span class="line">node_modules/</span><br><span class="line">frontend/node_modules/</span><br><span class="line"></span><br><span class="line"># Environment variables</span><br><span class="line">.env</span><br><span class="line"></span><br><span class="line"># Logs</span><br><span class="line">logs</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># IDEs</span><br><span class="line">.idea/</span><br><span class="line">.vscode/</span><br></pre></td></tr></table></figure><h3 id="三、前端开发框架搭建（Vue-js）"><a href="#三、前端开发框架搭建（Vue-js）" class="headerlink" title="三、前端开发框架搭建（Vue.js）"></a>三、前端开发框架搭建（Vue.js）</h3><p>假设选择 <strong>Vue.js</strong> 作为前端框架，并使用 <strong>Vuetify</strong> 作为UI组件库。</p><h4 id="1-初始化Vue项目"><a href="#1-初始化Vue项目" class="headerlink" title="1. 初始化Vue项目"></a>1. 初始化Vue项目</h4><p>使用 Vue CLI 初始化项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">vue create frontend</span><br></pre></td></tr></table></figure><p>选择默认配置或根据需要自定义配置。</p><h4 id="2-安装必要的依赖"><a href="#2-安装必要的依赖" class="headerlink" title="2. 安装必要的依赖"></a>2. 安装必要的依赖</h4><p>进入 <code>frontend</code> 目录并安装Vuetify和AWS SDK：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> frontend</span><br><span class="line">vue add vuetify</span><br><span class="line">npm install aws-sdk axios vue-router</span><br></pre></td></tr></table></figure><h4 id="3-设置项目结构"><a href="#3-设置项目结构" class="headerlink" title="3. 设置项目结构"></a>3. 设置项目结构</h4><p>在 <code>frontend/src</code> 下创建以下文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">├── components/</span><br><span class="line">├── views/</span><br><span class="line">├── services/</span><br><span class="line">├── router/</span><br><span class="line">├── store/</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure><h4 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量"></a>4. 配置环境变量</h4><p>在 <code>frontend</code> 目录下创建 <code>.env</code> 文件，添加AWS相关配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_AWS_ACCESS_KEY_ID=your_access_key_id</span><br><span class="line">VUE_APP_AWS_SECRET_ACCESS_KEY=your_secret_access_key</span><br><span class="line">VUE_APP_AWS_REGION=your_aws_region</span><br><span class="line">VUE_APP_S3_BUCKET_NAME=your_s3_bucket_name</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<strong>不要</strong>在前端直接暴露AWS密钥。推荐使用后端代理来处理S3访问，或者使用预签名URL。</p></blockquote><h4 id="5-创建上传组件"><a href="#5-创建上传组件" class="headerlink" title="5. 创建上传组件"></a>5. 创建上传组件</h4><p>在 <code>frontend/src/components/Upload.vue</code> 中创建上传组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;v-card&gt;</span><br><span class="line">    &lt;v-card-title&gt;上传音乐&lt;/v-card-title&gt;</span><br><span class="line">    &lt;v-card-text&gt;</span><br><span class="line">      &lt;v-file-input v-model=&quot;file&quot; label=&quot;选择音乐文件&quot; accept=&quot;audio/*&quot;&gt;&lt;/v-file-input&gt;</span><br><span class="line">      &lt;v-btn @click=&quot;uploadFile&quot; color=&quot;primary&quot;&gt;上传&lt;/v-btn&gt;</span><br><span class="line">    &lt;/v-card-text&gt;</span><br><span class="line">  &lt;/v-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      file: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async uploadFile() &#123;</span><br><span class="line">      if (!this.file) &#123;</span><br><span class="line">        alert(&#x27;请先选择文件&#x27;)</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      try &#123;</span><br><span class="line">        // 获取预签名URL</span><br><span class="line">        const response = await axios.get(&#x27;/api/upload/presigned-url&#x27;, &#123;</span><br><span class="line">          params: &#123;</span><br><span class="line">            fileName: this.file.name,</span><br><span class="line">            fileType: this.file.type</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        const &#123; url &#125; = response.data</span><br><span class="line"></span><br><span class="line">        // 上传文件到S3</span><br><span class="line">        await axios.put(url, this.file, &#123;</span><br><span class="line">          headers: &#123;</span><br><span class="line">            &#x27;Content-Type&#x27;: this.file.type</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        alert(&#x27;上传成功&#x27;)</span><br><span class="line">      &#125; catch (error) &#123;</span><br><span class="line">        console.error(error)</span><br><span class="line">        alert(&#x27;上传失败&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="6-创建音乐列表组件"><a href="#6-创建音乐列表组件" class="headerlink" title="6. 创建音乐列表组件"></a>6. 创建音乐列表组件</h4><p>在 <code>frontend/src/components/MusicList.vue</code> 中创建音乐列表组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;v-card&gt;</span><br><span class="line">    &lt;v-card-title&gt;音乐列表&lt;/v-card-title&gt;</span><br><span class="line">    &lt;v-card-text&gt;</span><br><span class="line">      &lt;v-list&gt;</span><br><span class="line">        &lt;v-list-item v-for=&quot;item in music&quot; :key=&quot;item.key&quot;&gt;</span><br><span class="line">          &lt;v-list-item-content&gt;</span><br><span class="line">            &lt;v-list-item-title&gt;&#123;&#123; item.key &#125;&#125;&lt;/v-list-item-title&gt;</span><br><span class="line">            &lt;v-list-item-subtitle&gt;大小: &#123;&#123; item.size &#125;&#125; 字节&lt;/v-list-item-subtitle&gt;</span><br><span class="line">          &lt;/v-list-item-content&gt;</span><br><span class="line">          &lt;v-list-item-action&gt;</span><br><span class="line">            &lt;v-btn icon @click=&quot;playMusic(item.url)&quot;&gt;</span><br><span class="line">              &lt;v-icon&gt;mdi-play&lt;/v-icon&gt;</span><br><span class="line">            &lt;/v-btn&gt;</span><br><span class="line">          &lt;/v-list-item-action&gt;</span><br><span class="line">        &lt;/v-list-item&gt;</span><br><span class="line">      &lt;/v-list&gt;</span><br><span class="line">    &lt;/v-card-text&gt;</span><br><span class="line">  &lt;/v-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      music: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.fetchMusicList()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async fetchMusicList() &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        const response = await axios.get(&#x27;/api/music/list&#x27;)</span><br><span class="line">        this.music = response.data</span><br><span class="line">      &#125; catch (error) &#123;</span><br><span class="line">        console.error(error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    playMusic(url) &#123;</span><br><span class="line">      const audio = new Audio(url)</span><br><span class="line">      audio.play()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="7-配置路由"><a href="#7-配置路由" class="headerlink" title="7. 配置路由"></a>7. 配置路由</h4><p>在 <code>frontend/src/router/index.js</code> 中配置路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Upload</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Upload.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MusicList</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/MusicList.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Upload</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/music&#x27;</span>, <span class="attr">component</span>: <span class="title class_">MusicList</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h4 id="8-集成到主应用"><a href="#8-集成到主应用" class="headerlink" title="8. 集成到主应用"></a>8. 集成到主应用</h4><p>在 <code>frontend/src/App.vue</code> 中集成导航：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;v-app&gt;</span><br><span class="line">    &lt;v-app-bar app&gt;</span><br><span class="line">      &lt;v-toolbar-title&gt;音乐播放器&lt;/v-toolbar-title&gt;</span><br><span class="line">      &lt;v-spacer&gt;&lt;/v-spacer&gt;</span><br><span class="line">      &lt;v-btn text to=&quot;/&quot;&gt;上传&lt;/v-btn&gt;</span><br><span class="line">      &lt;v-btn text to=&quot;/music&quot;&gt;音乐列表&lt;/v-btn&gt;</span><br><span class="line">    &lt;/v-app-bar&gt;</span><br><span class="line">    &lt;v-main&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/v-main&gt;</span><br><span class="line">  &lt;/v-app&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在 <code>frontend/src/main.js</code> 中引入路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vuetify <span class="keyword">from</span> <span class="string">&#x27;./plugins/vuetify&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  vuetify,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="9-配置代理解决跨域问题"><a href="#9-配置代理解决跨域问题" class="headerlink" title="9. 配置代理解决跨域问题"></a>9. 配置代理解决跨域问题</h4><p>在 <code>frontend/vue.config.js</code> 中配置代理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、后端开发框架搭建（Spring-Boot）"><a href="#四、后端开发框架搭建（Spring-Boot）" class="headerlink" title="四、后端开发框架搭建（Spring Boot）"></a>四、后端开发框架搭建（Spring Boot）</h3><h4 id="1-初始化Spring-Boot项目"><a href="#1-初始化Spring-Boot项目" class="headerlink" title="1. 初始化Spring Boot项目"></a>1. 初始化Spring Boot项目</h4><p>您可以使用 <a href="https://start.spring.io/">Spring Initializr</a> 初始化项目，选择以下依赖：</p><ul><li>Spring Web</li><li>Spring Security</li><li>Spring Data JPA</li><li>AWS SDK (需要手动添加)</li><li>PostgreSQL Driver (或其他数据库驱动)</li><li>Lombok (可选)</li></ul><p>下载并解压项目，导入到您的IDE（如 IntelliJ IDEA）。</p><h4 id="2-配置-pom-xml"><a href="#2-配置-pom-xml" class="headerlink" title="2. 配置 pom.xml"></a>2. 配置 <code>pom.xml</code></h4><p>在 <code>pom.xml</code> 中添加AWS SDK依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其他依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>software.amazon.awssdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>s3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>software.amazon.awssdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-配置应用属性"><a href="#3-配置应用属性" class="headerlink" title="3. 配置应用属性"></a>3. 配置应用属性</h4><p>在 <code>src/main/resources/application.properties</code> 中配置数据库和AWS信息：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Server</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:postgresql://localhost:5432/musicplayer</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">your_db_username</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">your_db_password</span></span><br><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># AWS</span></span><br><span class="line"><span class="attr">aws.accessKeyId</span>=<span class="string">your_access_key_id</span></span><br><span class="line"><span class="attr">aws.secretAccessKey</span>=<span class="string">your_secret_access_key</span></span><br><span class="line"><span class="attr">aws.region</span>=<span class="string">your_aws_region</span></span><br><span class="line"><span class="attr">aws.s3.bucketName</span>=<span class="string">your_s3_bucket_name</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：为了安全，建议使用环境变量或AWS IAM角色管理凭证，避免在配置文件中明文存储密钥。</p></blockquote><h4 id="4-创建S3服务"><a href="#4-创建S3服务" class="headerlink" title="4. 创建S3服务"></a>4. 创建S3服务</h4><p>创建一个服务类来处理与S3的交互。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/java/com/example/musicplayer/service/S3Service.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.musicplayer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.auth.credentials.AwsBasicCredentials;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.regions.Region;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.s3.S3Client;</span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.s3.model.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">S3Service</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> S3Client s3Client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aws.s3.bucketName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">S3Service</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Value(&quot;$&#123;aws.accessKeyId&#125;&quot;)</span> String accessKeyId,</span></span><br><span class="line"><span class="params">            <span class="meta">@Value(&quot;$&#123;aws.secretAccessKey&#125;&quot;)</span> String secretAccessKey,</span></span><br><span class="line"><span class="params">            <span class="meta">@Value(&quot;$&#123;aws.region&#125;&quot;)</span> String region</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.s3Client = S3Client.builder()</span><br><span class="line">                .credentialsProvider(StaticCredentialsProvider.create(</span><br><span class="line">                        AwsBasicCredentials.create(accessKeyId, secretAccessKey)</span><br><span class="line">                ))</span><br><span class="line">                .region(Region.of(region))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generatePresignedUrl</span><span class="params">(String fileName, String contentType)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> UUID.randomUUID().toString() + <span class="string">&quot;_&quot;</span> + fileName;</span><br><span class="line"></span><br><span class="line">        <span class="type">PutObjectRequest</span> <span class="variable">putObjectRequest</span> <span class="operator">=</span> PutObjectRequest.builder()</span><br><span class="line">                .bucket(bucketName)</span><br><span class="line">                .key(key)</span><br><span class="line">                .contentType(contentType)</span><br><span class="line">                .acl(ObjectCannedACL.PUBLIC_READ)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">PutObjectPresignRequest</span> <span class="variable">presignRequest</span> <span class="operator">=</span> PutObjectPresignRequest.builder()</span><br><span class="line">                .signatureDuration(Duration.ofMinutes(<span class="number">10</span>))</span><br><span class="line">                .putObjectRequest(putObjectRequest)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">PresignedPutObjectRequest</span> <span class="variable">presignedRequest</span> <span class="operator">=</span> s3Client.presignPutObject(presignRequest);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> presignedRequest.url().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListObjectsV2Response <span class="title function_">listMusicFiles</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ListObjectsV2Request</span> <span class="variable">listReq</span> <span class="operator">=</span> ListObjectsV2Request.builder()</span><br><span class="line">                .bucket(bucketName)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s3Client.listObjectsV2(listReq);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateGetUrl</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">GetObjectRequest</span> <span class="variable">getObjectRequest</span> <span class="operator">=</span> GetObjectRequest.builder()</span><br><span class="line">                .bucket(bucketName)</span><br><span class="line">                .key(key)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">GetObjectPresignRequest</span> <span class="variable">presignRequest</span> <span class="operator">=</span> GetObjectPresignRequest.builder()</span><br><span class="line">                .signatureDuration(Duration.ofHours(<span class="number">1</span>))</span><br><span class="line">                .getObjectRequest(getObjectRequest)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">PresignedGetObjectRequest</span> <span class="variable">presignedGet</span> <span class="operator">=</span> s3Client.presignGetObject(presignRequest);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> presignedGet.url().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-创建控制器"><a href="#5-创建控制器" class="headerlink" title="5. 创建控制器"></a>5. 创建控制器</h4><p>创建控制器来处理上传和获取音乐列表的请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/java/com/example/musicplayer/controller/S3Controller.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.musicplayer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.musicplayer.service.S3Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> software.amazon.awssdk.services.s3.model.S3Object;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;http://localhost:8080&quot;)</span> <span class="comment">// 根据前端地址配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">S3Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> S3Service s3Service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/upload/presigned-url&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPresignedUrl</span><span class="params">(<span class="meta">@RequestParam</span> String fileName, <span class="meta">@RequestParam</span> String fileType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s3Service.generatePresignedUrl(fileName, fileType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/music/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;MusicFile&gt; <span class="title function_">listMusic</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;S3Object&gt; objects = s3Service.listMusicFiles().contents();</span><br><span class="line">        <span class="keyword">return</span> objects.stream().map(obj -&gt; <span class="keyword">new</span> <span class="title class_">MusicFile</span>(</span><br><span class="line">                obj.key(),</span><br><span class="line">                s3Service.generateGetUrl(obj.key()),</span><br><span class="line">                obj.size(),</span><br><span class="line">                obj.lastModified()</span><br><span class="line">        )).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DTO类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MusicFile</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String key;</span><br><span class="line">        <span class="keyword">private</span> String url;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">long</span> size;</span><br><span class="line">        <span class="keyword">private</span> String lastModified;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MusicFile</span><span class="params">(String key, String url, <span class="type">long</span> size, java.time.Instant lastModified)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.url = url;</span><br><span class="line">            <span class="built_in">this</span>.size = size;</span><br><span class="line">            <span class="built_in">this</span>.lastModified = lastModified.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Getters 和 Setters</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getKey</span><span class="params">()</span> &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123; <span class="keyword">return</span> url; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getSize</span><span class="params">()</span> &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getLastModified</span><span class="params">()</span> &#123; <span class="keyword">return</span> lastModified; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(String key)</span> &#123; <span class="built_in">this</span>.key = key; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123; <span class="built_in">this</span>.url = url; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="type">long</span> size)</span> &#123; <span class="built_in">this</span>.size = size; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLastModified</span><span class="params">(String lastModified)</span> &#123; <span class="built_in">this</span>.lastModified = lastModified; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-配置CORS"><a href="#6-配置CORS" class="headerlink" title="6. 配置CORS"></a>6. 配置CORS</h4><p>确保Spring Boot允许来自前端的跨域请求。在 <code>src/main/java/com/example/musicplayer/config/WebConfig.java</code> 中配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.musicplayer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/api/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;http://localhost:8080&quot;</span>) <span class="comment">// 前端地址</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-数据库配置（可选）"><a href="#7-数据库配置（可选）" class="headerlink" title="7. 数据库配置（可选）"></a>7. 数据库配置（可选）</h4><p>如果需要存储用户信息、播放列表等数据，可以配置数据库并使用JPA进行管理。这里假设使用 PostgreSQL。</p><h5 id="a-配置数据库连接"><a href="#a-配置数据库连接" class="headerlink" title="a. 配置数据库连接"></a>a. 配置数据库连接</h5><p>在 <code>application.properties</code> 中已经配置了数据库连接参数。</p><h5 id="b-创建实体类"><a href="#b-创建实体类" class="headerlink" title="b. 创建实体类"></a>b. 创建实体类</h5><p>例如，创建 <code>User</code> 实体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/java/com/example/musicplayer/model/User.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.musicplayer.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(unique = true, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他字段，如邮箱等</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters 和 Setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-创建仓库接口"><a href="#c-创建仓库接口" class="headerlink" title="c. 创建仓库接口"></a>c. 创建仓库接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/java/com/example/musicplayer/repository/UserRepository.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.musicplayer.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.musicplayer.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    User <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d-同步数据库"><a href="#d-同步数据库" class="headerlink" title="d. 同步数据库"></a>d. 同步数据库</h5><p>确保在应用启动时，JPA自动创建或更新表结构：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br></pre></td></tr></table></figure><h4 id="8-用户认证与授权"><a href="#8-用户认证与授权" class="headerlink" title="8. 用户认证与授权"></a>8. 用户认证与授权</h4><p>可以使用 <strong>Spring Security</strong> 实现用户认证和授权，或者集成 <strong>Amazon Cognito</strong>。这里以 <strong>Spring Security</strong> + <strong>JWT</strong> 为例。</p><h5 id="a-添加依赖"><a href="#a-添加依赖" class="headerlink" title="a. 添加依赖"></a>a. 添加依赖</h5><p>在 <code>pom.xml</code> 中添加Spring Security和JWT相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="b-配置Spring-Security"><a href="#b-配置Spring-Security" class="headerlink" title="b. 配置Spring Security"></a>b. 配置Spring Security</h5><p>创建一个配置类 <code>SecurityConfig</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/java/com/example/musicplayer/config/SecurityConfig.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.musicplayer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">            .csrf().disable() <span class="comment">// 根据需要配置</span></span><br><span class="line">            .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/api/auth/**&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .httpBasic(); <span class="comment">// 或者配置JWT认证</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-创建认证控制器"><a href="#c-创建认证控制器" class="headerlink" title="c. 创建认证控制器"></a>c. 创建认证控制器</h5><p>创建一个简单的认证控制器进行用户注册和登录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/java/com/example/musicplayer/controller/AuthController.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.musicplayer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.musicplayer.model.User;</span><br><span class="line"><span class="keyword">import</span> com.example.musicplayer.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/auth&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;http://localhost:8080&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;注册成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录接口和JWT生成逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d-配置密码编码器"><a href="#d-配置密码编码器" class="headerlink" title="d. 配置密码编码器"></a>d. 配置密码编码器</h5><p>在 <code>SecurityConfig</code> 中添加密码编码器 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="e-实现JWT生成与验证"><a href="#e-实现JWT生成与验证" class="headerlink" title="e. 实现JWT生成与验证"></a>e. 实现JWT生成与验证</h5><p>需要实现JWT生成和验证逻辑，包括过滤器、JWT工具类等。具体实现可以参考Spring Security与JWT的集成教程，这里略过详细代码。</p><h3 id="五、部署与运维"><a href="#五、部署与运维" class="headerlink" title="五、部署与运维"></a>五、部署与运维</h3><h4 id="1-使用Docker容器化应用"><a href="#1-使用Docker容器化应用" class="headerlink" title="1. 使用Docker容器化应用"></a>1. 使用Docker容器化应用</h4><h5 id="a-创建Dockerfile"><a href="#a-创建Dockerfile" class="headerlink" title="a. 创建Dockerfile"></a>a. 创建Dockerfile</h5><p><strong>后端Dockerfile</strong> (<code>backend/Dockerfile</code>):</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用官方Java运行时作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">17</span>-jdk-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制Maven构建的JAR文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> target/music-player-backend.jar app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行JAR文件</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><strong>前端Dockerfile</strong> (<code>frontend/Dockerfile</code>):</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建阶段</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">16</span> as build-stage</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package*.json ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产阶段</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build-stage /app/dist /usr/share/nginx/html</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure><h5 id="b-创建-docker-compose-yml"><a href="#b-创建-docker-compose-yml" class="headerlink" title="b. 创建 docker-compose.yml"></a>b. 创建 <code>docker-compose.yml</code></h5><p>在项目根目录下创建 <code>docker-compose.yml</code> 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./backend</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_ACCESS_KEY_ID=your_access_key_id</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_SECRET_ACCESS_KEY=your_secret_access_key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_REGION=your_aws_region</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_S3_BUCKET_NAME=your_s3_bucket_name</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/musicplayer</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_USERNAME=your_db_username</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_PASSWORD=your_db_password</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./frontend</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:13</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">your_db_username</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">your_db_password</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">musicplayer</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5432:5432&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db-data:/var/lib/postgresql/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br></pre></td></tr></table></figure><h5 id="c-构建和启动容器"><a href="#c-构建和启动容器" class="headerlink" title="c. 构建和启动容器"></a>c. 构建和启动容器</h5><p>在项目根目录下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure><h4 id="2-部署到AWS"><a href="#2-部署到AWS" class="headerlink" title="2. 部署到AWS"></a>2. 部署到AWS</h4><p>可以使用 <strong>AWS Elastic Beanstalk</strong>、<strong>Amazon ECS</strong> 或 <strong>AWS Fargate</strong> 部署容器化应用。以下以 <strong>Elastic Beanstalk</strong> 为例：</p><h5 id="a-安装AWS-CLI和Elastic-Beanstalk-CLI"><a href="#a-安装AWS-CLI和Elastic-Beanstalk-CLI" class="headerlink" title="a. 安装AWS CLI和Elastic Beanstalk CLI"></a>a. 安装AWS CLI和Elastic Beanstalk CLI</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装AWS CLI</span></span><br><span class="line">pip install awscli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Elastic Beanstalk CLI</span></span><br><span class="line">pip install awsebcli</span><br></pre></td></tr></table></figure><h5 id="b-配置AWS-CLI"><a href="#b-配置AWS-CLI" class="headerlink" title="b. 配置AWS CLI"></a>b. 配置AWS CLI</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws configure</span><br></pre></td></tr></table></figure><p>输入您的AWS访问密钥、秘密密钥、区域和输出格式。</p><h5 id="c-初始化Elastic-Beanstalk"><a href="#c-初始化Elastic-Beanstalk" class="headerlink" title="c. 初始化Elastic Beanstalk"></a>c. 初始化Elastic Beanstalk</h5><p>进入 <code>backend</code> 目录并初始化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> backend</span><br><span class="line">eb init -p docker music-player-backend</span><br></pre></td></tr></table></figure><h5 id="d-创建环境并部署"><a href="#d-创建环境并部署" class="headerlink" title="d. 创建环境并部署"></a>d. 创建环境并部署</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eb create music-player-backend-env</span><br><span class="line">eb deploy</span><br></pre></td></tr></table></figure><p>类似地，可以为前端创建Elastic Beanstalk环境，或将前后端整合到同一个应用中。</p><h3 id="六、安全与合规"><a href="#六、安全与合规" class="headerlink" title="六、安全与合规"></a>六、安全与合规</h3><h4 id="1-数据加密"><a href="#1-数据加密" class="headerlink" title="1. 数据加密"></a>1. 数据加密</h4><p>确保S3存储桶启用了服务器端加密（SSE）：</p><ol><li>在S3存储桶设置中，启用默认的SSE（如AES-256或使用KMS）。</li><li>配置Spring Boot中的S3客户端以使用加密选项。</li></ol><h4 id="2-网络安全"><a href="#2-网络安全" class="headerlink" title="2. 网络安全"></a>2. 网络安全</h4><ul><li>使用 <strong>VPC</strong> 和 <strong>安全组</strong> 控制数据库和后端的访问权限。</li><li>配置 <strong>HTTPS</strong> 以加密传输数据。可以使用 <strong>AWS Certificate Manager</strong> 申请SSL证书，并在Elastic Beanstalk或CloudFront中配置。</li></ul><h4 id="3-监控与日志"><a href="#3-监控与日志" class="headerlink" title="3. 监控与日志"></a>3. 监控与日志</h4><p>使用 <strong>AWS CloudWatch</strong> 监控应用性能和安全事件。</p><ul><li>配置CloudWatch Logs来收集后端和前端的日志。</li><li>设置CloudWatch Alarms以监控关键指标，如CPU使用率、内存使用等。</li></ul><h3 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h3><p>使用 <strong>Vue.js</strong> 和 <strong>Spring Boot</strong> 构建一个基于Amazon S3存储的音乐播放器，可以充分利用这两种技术的优势。Vue.js 提供了灵活的前端开发体验，Spring Boot 则提供了强大的后端服务能力。通过合理的项目结构、容器化部署和安全配置，您可以构建一个高效、可扩展且安全的音乐播放器。</p><p>如果在开发过程中遇到具体问题，欢迎随时提问！</p><hr><h2 id="选项二：使用-Rust-构建命令行式的音乐播放程序"><a href="#选项二：使用-Rust-构建命令行式的音乐播放程序" class="headerlink" title="选项二：使用 Rust 构建命令行式的音乐播放程序"></a>选项二：使用 Rust 构建命令行式的音乐播放程序</h2><p>如果您希望构建一个命令行式的音乐播放器，可以使用 <strong>Rust</strong> 语言来实现。Rust 拥有高性能和安全性，非常适合构建高效的CLI应用。以下是详细的步骤和技术选型建议。</p><h3 id="一、项目初始化"><a href="#一、项目初始化" class="headerlink" title="一、项目初始化"></a>一、项目初始化</h3><h4 id="1-安装Rust"><a href="#1-安装Rust" class="headerlink" title="1. 安装Rust"></a>1. 安装Rust</h4><p>确保您已经安装了Rust工具链。如果还没有安装，可以使用 <a href="https://rustup.rs/">rustup</a> 安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br></pre></td></tr></table></figure><p>安装完成后，重新启动终端并验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustc --version</span><br></pre></td></tr></table></figure><h4 id="2-创建新项目"><a href="#2-创建新项目" class="headerlink" title="2. 创建新项目"></a>2. 创建新项目</h4><p>使用Cargo（Rust的包管理工具）创建新项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cargo new music-player-cli</span><br><span class="line"><span class="built_in">cd</span> music-player-cli</span><br></pre></td></tr></table></figure><h3 id="二、技术选型"><a href="#二、技术选型" class="headerlink" title="二、技术选型"></a>二、技术选型</h3><ul><li><strong>HTTP 客户端</strong>：<code>reqwest</code> 用于与S3进行通信。</li><li><strong>JSON 解析</strong>：<code>serde</code> 和 <code>serde_json</code> 用于处理JSON数据。</li><li><strong>CLI 框架</strong>：<code>clap</code> 或 <code>structopt</code> 用于构建命令行界面。</li><li><strong>异步编程</strong>：<code>tokio</code> 提供异步运行时。</li><li><strong>音频播放</strong>：<code>rodio</code> 用于播放音频。</li><li><strong>AWS SDK</strong>：<code>aws-sdk-s3</code>（目前Rust的AWS SDK在发展中，可考虑使用其他库或通过HTTP API进行S3交互）。</li></ul><h3 id="三、添加依赖"><a href="#三、添加依赖" class="headerlink" title="三、添加依赖"></a>三、添加依赖</h3><p>编辑 <code>Cargo.toml</code> 文件，添加所需依赖：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">clap</span> = &#123; version = <span class="string">&quot;4.0&quot;</span>, features = [<span class="string">&quot;derive&quot;</span>] &#125;</span><br><span class="line"><span class="attr">reqwest</span> = &#123; version = <span class="string">&quot;0.11&quot;</span>, features = [<span class="string">&quot;json&quot;</span>, <span class="string">&quot;blocking&quot;</span>] &#125;</span><br><span class="line"><span class="attr">serde</span> = &#123; version = <span class="string">&quot;1.0&quot;</span>, features = [<span class="string">&quot;derive&quot;</span>] &#125;</span><br><span class="line"><span class="attr">serde_json</span> = <span class="string">&quot;1.0&quot;</span></span><br><span class="line"><span class="attr">tokio</span> = &#123; version = <span class="string">&quot;1&quot;</span>, features = [<span class="string">&quot;full&quot;</span>] &#125;</span><br><span class="line"><span class="attr">rodio</span> = <span class="string">&quot;0.17&quot;</span></span><br><span class="line"><span class="attr">dotenv</span> = <span class="string">&quot;0.15&quot;</span></span><br><span class="line"><span class="attr">uuid</span> = &#123; version = <span class="string">&quot;1&quot;</span>, features = [<span class="string">&quot;v4&quot;</span>] &#125;</span><br></pre></td></tr></table></figure><h3 id="四、配置环境变量"><a href="#四、配置环境变量" class="headerlink" title="四、配置环境变量"></a>四、配置环境变量</h3><p>使用 <code>.env</code> 文件存储AWS凭证和配置。</p><p>在项目根目录下创建 <code>.env</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AWS_ACCESS_KEY_ID=your_access_key_id</span><br><span class="line">AWS_SECRET_ACCESS_KEY=your_secret_access_key</span><br><span class="line">AWS_REGION=your_aws_region</span><br><span class="line">S3_BUCKET_NAME=your_s3_bucket_name</span><br></pre></td></tr></table></figure><p>安装 <code>dotenv</code> 以加载环境变量。</p><h3 id="五、实现功能"><a href="#五、实现功能" class="headerlink" title="五、实现功能"></a>五、实现功能</h3><h4 id="1-构建命令行接口"><a href="#1-构建命令行接口" class="headerlink" title="1. 构建命令行接口"></a>1. 构建命令行接口</h4><p>使用 <code>clap</code> 定义CLI命令和选项。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.rs</span></span><br><span class="line"><span class="keyword">use</span> clap::&#123;Parser, Subcommand&#125;;</span><br><span class="line"><span class="keyword">use</span> dotenv::dotenv;</span><br><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Parser)]</span></span><br><span class="line"><span class="meta">#[command(name = <span class="string">&quot;Music Player CLI&quot;</span>)]</span></span><br><span class="line"><span class="meta">#[command(about = <span class="string">&quot;A command-line music player using Amazon S3&quot;</span>, long_about = None)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Cli</span> &#123;</span><br><span class="line">    <span class="meta">#[command(subcommand)]</span></span><br><span class="line">    command: Commands,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Subcommand)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Commands</span> &#123;</span><br><span class="line">    <span class="comment">/// Upload a music file to S3</span></span><br><span class="line">    Upload &#123;</span><br><span class="line">        <span class="comment">/// Path to the music file</span></span><br><span class="line">        file_path: <span class="type">String</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/// List music files in S3</span></span><br><span class="line">    List,</span><br><span class="line">    <span class="comment">/// Play a music file from S3</span></span><br><span class="line">    Play &#123;</span><br><span class="line">        <span class="comment">/// Key of the music file in S3</span></span><br><span class="line">        key: <span class="type">String</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">dotenv</span>().<span class="title function_ invoke__">ok</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">cli</span> = Cli::<span class="title function_ invoke__">parse</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> &amp;cli.command &#123;</span><br><span class="line">        Commands::Upload &#123; file_path &#125; =&gt; &#123;</span><br><span class="line">            <span class="title function_ invoke__">upload_file</span>(file_path).<span class="keyword">await</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        Commands::List =&gt; &#123;</span><br><span class="line">            <span class="title function_ invoke__">list_music</span>().<span class="keyword">await</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        Commands::Play &#123; key &#125; =&gt; &#123;</span><br><span class="line">            <span class="title function_ invoke__">play_music</span>(key).<span class="keyword">await</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-实现上传功能"><a href="#2-实现上传功能" class="headerlink" title="2. 实现上传功能"></a>2. 实现上传功能</h4><p>创建一个模块来处理S3上传。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/s3.rs</span></span><br><span class="line"><span class="keyword">use</span> reqwest::Client;</span><br><span class="line"><span class="keyword">use</span> serde::Deserialize;</span><br><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"><span class="keyword">use</span> tokio::fs::File;</span><br><span class="line"><span class="keyword">use</span> tokio::io::AsyncReadExt;</span><br><span class="line"><span class="keyword">use</span> uuid::Uuid;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Deserialize)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PresignedUrlResponse</span> &#123;</span><br><span class="line">    url: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">upload_file</span>(file_path: &amp;<span class="type">str</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">file_name</span> = <span class="keyword">match</span> std::path::Path::<span class="title function_ invoke__">new</span>(file_path).<span class="title function_ invoke__">file_name</span>() &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(name) =&gt; name.<span class="title function_ invoke__">to_string_lossy</span>().<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">        <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">            <span class="built_in">eprintln!</span>(<span class="string">&quot;Invalid file path&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取预签名URL</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">client</span> = Client::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">backend_url</span> = <span class="string">&quot;http://localhost:8080/api/upload/presigned-url&quot;</span>; <span class="comment">// 后端地址</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">resp</span> = client</span><br><span class="line">        .<span class="title function_ invoke__">get</span>(backend_url)</span><br><span class="line">        .<span class="title function_ invoke__">query</span>(&amp;[(<span class="string">&quot;fileName&quot;</span>, file_name.<span class="title function_ invoke__">clone</span>()), (<span class="string">&quot;fileType&quot;</span>, <span class="string">&quot;audio/mpeg&quot;</span>)])</span><br><span class="line">        .<span class="title function_ invoke__">send</span>()</span><br><span class="line">        .<span class="keyword">await</span></span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to get presigned URL&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !resp.<span class="title function_ invoke__">status</span>().<span class="title function_ invoke__">is_success</span>() &#123;</span><br><span class="line">        <span class="built_in">eprintln!</span>(<span class="string">&quot;Failed to get presigned URL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">presigned</span>: PresignedUrlResponse = resp.<span class="title function_ invoke__">json</span>().<span class="keyword">await</span>.<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Invalid response&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件内容</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">file</span> = File::<span class="title function_ invoke__">open</span>(file_path).<span class="keyword">await</span>.<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to open file&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">contents</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    file.<span class="title function_ invoke__">read_to_end</span>(&amp;<span class="keyword">mut</span> contents).<span class="keyword">await</span>.<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to read file&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传到S3</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">upload_resp</span> = client</span><br><span class="line">        .<span class="title function_ invoke__">put</span>(&amp;presigned.url)</span><br><span class="line">        .<span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;audio/mpeg&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">body</span>(contents)</span><br><span class="line">        .<span class="title function_ invoke__">send</span>()</span><br><span class="line">        .<span class="keyword">await</span></span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to upload file&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> upload_resp.<span class="title function_ invoke__">status</span>().<span class="title function_ invoke__">is_success</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">eprintln!</span>(<span class="string">&quot;上传失败: &#123;&#125;&quot;</span>, upload_resp.<span class="title function_ invoke__">status</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>main.rs</code> 中引入 <code>s3</code> 模块：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> s3;</span><br><span class="line"><span class="keyword">use</span> s3::upload_file;</span><br></pre></td></tr></table></figure><h4 id="3-实现列出音乐文件"><a href="#3-实现列出音乐文件" class="headerlink" title="3. 实现列出音乐文件"></a>3. 实现列出音乐文件</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/s3.rs (继续添加)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> serde::Serialize;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Serialize, Deserialize, Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MusicFile</span> &#123;</span><br><span class="line">    key: <span class="type">String</span>,</span><br><span class="line">    url: <span class="type">String</span>,</span><br><span class="line">    size: <span class="type">u64</span>,</span><br><span class="line">    last_modified: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">list_music</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">client</span> = Client::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">backend_url</span> = <span class="string">&quot;http://localhost:8080/api/music/list&quot;</span>; <span class="comment">// 后端地址</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">resp</span> = client</span><br><span class="line">        .<span class="title function_ invoke__">get</span>(backend_url)</span><br><span class="line">        .<span class="title function_ invoke__">send</span>()</span><br><span class="line">        .<span class="keyword">await</span></span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to fetch music list&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !resp.<span class="title function_ invoke__">status</span>().<span class="title function_ invoke__">is_success</span>() &#123;</span><br><span class="line">        <span class="built_in">eprintln!</span>(<span class="string">&quot;Failed to fetch music list&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">music_list</span>: <span class="type">Vec</span>&lt;MusicFile&gt; = resp.<span class="title function_ invoke__">json</span>().<span class="keyword">await</span>.<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Invalid response&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:&lt;50&#125; &#123;:&lt;10&#125; &#123;&#125;&quot;</span>, <span class="string">&quot;Key&quot;</span>, <span class="string">&quot;Size&quot;</span>, <span class="string">&quot;Last Modified&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">music</span> <span class="keyword">in</span> music_list &#123;</span><br><span class="line">        <span class="built_in">println!</span>(</span><br><span class="line">            <span class="string">&quot;&#123;:&lt;50&#125; &#123;:&lt;10&#125; &#123;&#125;&quot;</span>,</span><br><span class="line">            music.key, music.size, music.last_modified</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>main.rs</code> 中引入 <code>list_music</code> 函数。</p><h4 id="4-实现播放功能"><a href="#4-实现播放功能" class="headerlink" title="4. 实现播放功能"></a>4. 实现播放功能</h4><p>使用 <code>rodio</code> 播放音频。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/s3.rs (继续添加)</span></span><br><span class="line"><span class="keyword">use</span> rodio::&#123;Decoder, OutputStream, source::Source&#125;;</span><br><span class="line"><span class="keyword">use</span> std::io::Cursor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">play_music</span>(key: &amp;<span class="type">str</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">client</span> = Client::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">backend_url</span> = <span class="string">&quot;http://localhost:8080/api/music/list&quot;</span>; <span class="comment">// 后端地址</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">resp</span> = client</span><br><span class="line">        .<span class="title function_ invoke__">get</span>(backend_url)</span><br><span class="line">        .<span class="title function_ invoke__">send</span>()</span><br><span class="line">        .<span class="keyword">await</span></span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to fetch music list&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !resp.<span class="title function_ invoke__">status</span>().<span class="title function_ invoke__">is_success</span>() &#123;</span><br><span class="line">        <span class="built_in">eprintln!</span>(<span class="string">&quot;Failed to fetch music list&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">music_list</span>: <span class="type">Vec</span>&lt;MusicFile&gt; = resp.<span class="title function_ invoke__">json</span>().<span class="keyword">await</span>.<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Invalid response&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">music</span> = music_list.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">find</span>(|m| m.key == key);</span><br><span class="line">    <span class="keyword">if</span> music.<span class="title function_ invoke__">is_none</span>() &#123;</span><br><span class="line">        <span class="built_in">eprintln!</span>(<span class="string">&quot;Music file not found&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">music</span> = music.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载音频数据</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">audio_resp</span> = client</span><br><span class="line">        .<span class="title function_ invoke__">get</span>(&amp;music.url)</span><br><span class="line">        .<span class="title function_ invoke__">send</span>()</span><br><span class="line">        .<span class="keyword">await</span></span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to download audio&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !audio_resp.<span class="title function_ invoke__">status</span>().<span class="title function_ invoke__">is_success</span>() &#123;</span><br><span class="line">        <span class="built_in">eprintln!</span>(<span class="string">&quot;Failed to download audio&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">audio_data</span> = audio_resp.<span class="title function_ invoke__">bytes</span>().<span class="keyword">await</span>.<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to read audio data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 播放音频</span></span><br><span class="line">    <span class="keyword">let</span> (_stream, stream_handle) = OutputStream::<span class="title function_ invoke__">try_default</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">sink</span> = rodio::Sink::<span class="title function_ invoke__">try_new</span>(&amp;stream_handle).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">cursor</span> = Cursor::<span class="title function_ invoke__">new</span>(audio_data.<span class="title function_ invoke__">to_vec</span>());</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">source</span> = Decoder::<span class="title function_ invoke__">new</span>(cursor).<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">repeat_infinite</span>();</span><br><span class="line">    sink.<span class="title function_ invoke__">append</span>(source);</span><br><span class="line">    sink.<span class="title function_ invoke__">sleep_until_end</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>main.rs</code> 中引入 <code>play_music</code> 函数。</p><h3 id="四、运行程序"><a href="#四、运行程序" class="headerlink" title="四、运行程序"></a>四、运行程序</h3><p>确保后端服务已启动并可访问。</p><p>在项目根目录下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cargo run -- upload path/to/your/musicfile.mp3</span><br><span class="line">cargo run -- list</span><br><span class="line">cargo run -- play your_music_file_key</span><br></pre></td></tr></table></figure><h3 id="五、优化与增强"><a href="#五、优化与增强" class="headerlink" title="五、优化与增强"></a>五、优化与增强</h3><h4 id="1-错误处理"><a href="#1-错误处理" class="headerlink" title="1. 错误处理"></a>1. 错误处理</h4><p>为所有异步操作添加更完善的错误处理，避免程序崩溃。</p><h4 id="2-配置管理"><a href="#2-配置管理" class="headerlink" title="2. 配置管理"></a>2. 配置管理</h4><p>使用 <code>dotenv</code> 加载环境变量，增强安全性和灵活性。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 main.rs 中添加</span></span><br><span class="line"><span class="keyword">use</span> dotenv::dotenv;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">dotenv</span>().<span class="title function_ invoke__">ok</span>();</span><br><span class="line">    <span class="comment">// 其余代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-并发与性能"><a href="#3-并发与性能" class="headerlink" title="3. 并发与性能"></a>3. 并发与性能</h4><p>使用 <code>tokio</code> 提高网络请求和音频处理的并发性能。</p><h4 id="4-音频格式支持"><a href="#4-音频格式支持" class="headerlink" title="4. 音频格式支持"></a>4. 音频格式支持</h4><p>确保 <code>rodio</code> 支持您需要播放的音频格式，必要时引入额外的编解码器。</p><h3 id="六、部署与分发"><a href="#六、部署与分发" class="headerlink" title="六、部署与分发"></a>六、部署与分发</h3><h4 id="1-构建二进制文件"><a href="#1-构建二进制文件" class="headerlink" title="1. 构建二进制文件"></a>1. 构建二进制文件</h4><p>使用Cargo构建适用于目标平台的二进制文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build --release</span><br></pre></td></tr></table></figure><p>生成的可执行文件位于 <code>target/release/</code> 目录下。</p><h4 id="2-打包与分发"><a href="#2-打包与分发" class="headerlink" title="2. 打包与分发"></a>2. 打包与分发</h4><p>根据目标平台，打包二进制文件或创建安装脚本，方便用户下载和使用。</p><h3 id="七、安全与合规"><a href="#七、安全与合规" class="headerlink" title="七、安全与合规"></a>七、安全与合规</h3><h4 id="1-凭证管理"><a href="#1-凭证管理" class="headerlink" title="1. 凭证管理"></a>1. 凭证管理</h4><p>避免在代码中硬编码AWS凭证，使用环境变量或AWS IAM角色管理凭证。</p><h4 id="2-数据加密"><a href="#2-数据加密" class="headerlink" title="2. 数据加密"></a>2. 数据加密</h4><p>确保上传到S3的文件启用了服务器端加密（SSE）。</p><h4 id="3-网络安全"><a href="#3-网络安全" class="headerlink" title="3. 网络安全"></a>3. 网络安全</h4><p>确保与后端通信时使用HTTPS，保护数据传输的安全性。</p><h3 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h3><p>使用 <strong>Rust</strong> 构建命令行式的音乐播放器，可以实现高效、可靠的音乐播放功能。通过与Spring Boot后端的协作，CLI程序可以安全地与Amazon S3交互，上传、列出和播放音乐文件。Rust的性能和安全性使其成为构建此类应用的理想选择。</p><p>如果您需要更详细的实现细节或在开发过程中遇到问题，欢迎随时提问！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;将分别介绍如何使用 &lt;strong&gt;Vue.js&lt;/strong&gt; 和 &lt;strong&gt;Spring Boot&lt;/strong&gt; 构建一个基于Amazon S3存储的音乐播放器，以及如何使用 &lt;strong&gt;Rust&lt;/strong&gt; 构建一个命令行式的播放程序。您可以根据项目需求和个人偏好选择合适的技术栈。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://qbmzc.github.io/categories/Linux/"/>
    
    
    <category term="music" scheme="https://qbmzc.github.io/tags/music/"/>
    
  </entry>
  
  <entry>
    <title>使用 Steam 的双重验证</title>
    <link href="https://qbmzc.github.io/2024/12/05/2024/12/051438/"/>
    <id>https://qbmzc.github.io/2024/12/05/2024/12/051438/</id>
    <published>2024-12-04T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.106Z</updated>
    
    <content type="html"><![CDATA[<p>要在第三方双重验证器中使用 Steam 的双重验证（如 Google Authenticator 等），您需要获取 Steam 帐号的共享密钥（shared secret）和身份密钥（identity secret）。以下是获取这些密钥的常见方法：</p><p><strong>方法一：使用 WinAuth</strong></p><p>WinAuth 是一款适用于 Windows 的开源双重验证工具，支持 Steam 等多种服务。通过 WinAuth，您可以在 PC 上管理 Steam 的双重验证。具体步骤如下：</p><ol><li><p><strong>下载并安装 WinAuth</strong>：前往 <a href="https://github.com/winauth/winauth">WinAuth 的 GitHub 页面</a> 下载最新版本的 WinAuth。</p></li><li><p><strong>添加 Steam 帐号</strong>：</p><ul><li><p>打开 WinAuth，点击“Add”，选择“Steam”。</p></li><li><p>输入您的 Steam 帐号名称和密码，然后点击“Verify Authenticator”。</p></li><li><p>按照提示输入从 Steam 收到的验证码。</p></li></ul></li><li><p><strong>获取共享密钥和身份密钥</strong>：</p><ul><li><p>在添加帐号的过程中，WinAuth 会生成并显示您的共享密钥（shared secret）和身份密钥（identity secret）。</p></li><li><p>请妥善保存这些密钥，以便在其他双重验证器中使用。</p></li></ul></li></ol><p><strong>方法二：使用 Steam Desktop Authenticator（SDA）</strong></p><p>Steam Desktop Authenticator 是另一款用于管理 Steam 双重验证的工具。通过 SDA，您可以提取共享密钥和身份密钥。具体步骤如下：</p><ol><li><p><strong>下载并安装 SDA</strong>：前往 <a href="https://github.com/Jessecar96/SteamDesktopAuthenticator">Steam Desktop Authenticator 的 GitHub 页面</a> 下载最新版本。</p></li><li><p><strong>设置您的 Steam 帐号</strong>：</p><ul><li><p>打开 SDA，点击“Setup new account”。</p></li><li><p>输入您的 Steam 帐号信息，并按照提示完成设置。</p></li></ul></li><li><p><strong>导出密钥</strong>：</p><ul><li><p>在 SDA 中，选择您的帐号，点击“Manage Encryption”，然后选择“Remove Encryption”。</p></li><li><p>在 SDA 的主界面，右键点击您的帐号，选择“Export Account”。</p></li><li><p>保存导出的 maFile（JSON 格式），其中包含 shared_secret 和 identity_secret。</p></li></ul></li></ol><p><strong>注意事项</strong>：</p><ul><li><p><strong>安全性</strong>：提取并使用这些密钥存在一定风险，可能影响帐号安全。请确保从官方或可信来源下载工具，并妥善保管您的密钥。</p></li><li><p><strong>官方支持</strong>：Steam 官方并不支持在第三方验证器中使用其双重验证。使用非官方工具可能违反 Steam 的服务条款，导致帐号风险。</p></li><li><p><strong>备份</strong>：在进行任何操作前，务必备份您的密钥和相关数据，以防丢失。</p></li></ul><p>请谨慎操作，确保您的帐号安全。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要在第三方双重验证器中使用 Steam 的双重验证（如 Google Authenticator 等），您需要获取 Steam 帐号的共享密钥（shared secret）和身份密钥（identity secret）。以下是获取这些密钥的常见方法：&lt;/p&gt;
&lt;p&gt;&lt;stro</summary>
      
    
    
    
    <category term="congco" scheme="https://qbmzc.github.io/categories/congco/"/>
    
    
    <category term="game" scheme="https://qbmzc.github.io/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Using GraalVM and Native Image on Windows</title>
    <link href="https://qbmzc.github.io/2024/12/05/2024/12/051439/"/>
    <id>https://qbmzc.github.io/2024/12/05/2024/12/051439/</id>
    <published>2024-12-04T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.106Z</updated>
    
    <content type="html"><![CDATA[<p><em>合著者：</em><a href="https://medium.com/u/d11b08cee2a4?source=post_page---user_mention--9954dc071311--------------------------------"><em>Oracle 的 Scott Seighman</em></a></p><blockquote><p><strong>注意</strong>：从适用于 JDK 17 &#x2F; 20 的 GraalVM 开始，该工具会查找 Visual Studio 安装，并（如果找到）自动设置您的构建环境。因此，您可以在命令提示符或 PowerShell 中运行，而无需任何其他安装。<code>*native-image*``*native-image*</code></p><p>此博客文章已更新为与适用于 JDK 21 及更高版本的 GraalVM 兼容。<a href="https://www.graalvm.org/latest/docs/">网站上</a>提供了旧版 GraalVM 的安装说明。</p></blockquote><p><img src="http://test-fsservice.oss-cn-shanghai.aliyuncs.com/fs/test/2024/202412051444706.png" alt="img"></p><p>在 Windows 上使用 GraalVM 和 Native Image</p><p>本文将帮助任何使用 Windows 的人安装高性能 GraalVM JDK 及其 Native Image 工具。</p><p>我们已经看到越来越多的 Windows 用户表示对使用 <a href="https://www.graalvm.org/reference-manual/native-image/">GraalVM Native Image 感兴趣，GraalVM Native Image</a> 是一种预先 （AOT） 编译工具，可将 Java 字节码打包到独立的可执行文件中。此可执行文件是本机应用程序，与用户系统上的任何其他应用程序一样，通常可以实现更快的启动时间，同时占用的空间更小。</p><p>在 Windows 上安装 GraalVM 既快速又简单。使用 Native Image 只有几个先决条件。让我们一步一步来。</p><h1 id="第-1-部分：安装-GraalVM"><a href="#第-1-部分：安装-GraalVM" class="headerlink" title="第 1 部分：安装 GraalVM"></a>第 1 部分：安装 GraalVM</h1><ol><li><p>转到 <a href="https://www.graalvm.org/downloads/">graalvm.org&#x2F;downloads</a>，选择 Java 版本并下载。</p></li><li><p>将 directory 更改为要安装 GraalVM 的位置，然后将 <em>.zip</em> 文件移动到该位置。</p></li><li><p>解压缩文件。</p></li><li><p>接下来，您应该配置运行时环境，请注意计算机上可能安装了多个 JDK。打开 Windows 命令提示符并执行以下操作： - 将环境变量的值设置为 GraalVM <em>bin</em> 目录：</p><ul><li>将环境变量的值设置为安装目录：<code>PATH``setx /M PATH “C:\Progra~1\Java\&lt;graalvm install dir&gt;\bin;%PATH%”``JAVA_HOME</code> <code>setx /M JAVA_HOME “C:\Progra~1\Java\&lt;graalvm install dir&gt;”</code></li></ul></li><li><p>要验证 GraalVM 是否安装成功，请重新启动命令提示符并执行 。<code>java -version</code></p></li></ol><p>原生映像随 GraalVM 一起提供，但在 Windows 上，它需要 <strong>Visual Studio 2022 版本 17.1.0 或更高版本，</strong>以及 <strong>Microsoft Visual C++ （MSVC）。</strong>有两种安装选项：</p><ul><li><p>使用 Windows 11 SDK 安装 Visual Studio 生成工具</p></li><li><p>使用 Windows 11 SDK 安装 Visual Studio</p></li></ul><h1 id="第-2-部分：安装-Visual-Studio-构建工具和-Windows-11-SDK"><a href="#第-2-部分：安装-Visual-Studio-构建工具和-Windows-11-SDK" class="headerlink" title="第 2 部分：安装 Visual Studio 构建工具和 Windows 11 SDK"></a>第 2 部分：安装 Visual Studio 构建工具和 Windows 11 SDK</h1><h2 id="Visual-Studio的"><a href="#Visual-Studio的" class="headerlink" title="Visual Studio的"></a>Visual Studio的</h2><ol><li><p>从 <a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=16">visualstudio.microsoft.com</a> 下载 Visual Studio Build Tools 2022（C 开发环境）版本 17.1.0 或更高版本。</p></li><li><p>通过单击_.exe_文件开始 Visual Studio Build Tools 安装，然后单击 Continue：</p></li></ol><p><img src="http://test-fsservice.oss-cn-shanghai.aliyuncs.com/fs/test/2024/202412051445499.png" alt="img"></p><p>开始安装 Visual Studio Build Tools</p><ol start="3"><li>在主窗口中选中使用 <strong>C++ 进行桌面开发</strong>复选框。此外，在右侧的 安装详细信息 下，选择 <strong>Windows 11 SDK，</strong>然后单击 <strong>安装</strong>.</li></ol><p><img src="http://test-fsservice.oss-cn-shanghai.aliyuncs.com/fs/test/2024/202412051445553.png" alt="img"></p><p>使用 C++ 和 Windows 11 SDK 进行桌面开发</p><ol start="4"><li>安装完成后，重新启动系统。</li></ol><h2 id="Windows-11-开发工具包："><a href="#Windows-11-开发工具包：" class="headerlink" title="Windows 11 开发工具包："></a>Windows 11 开发工具包：</h2><p>接下来，如果您安装了 Visual Studio 2022，则需要确保 <strong>Windows 11 SDK</strong> 也可用：</p><ol><li>打开 Visual Studio 安装程序：</li></ol><p><img src="http://test-fsservice.oss-cn-shanghai.aliyuncs.com/fs/test/2024/202412051445918.png" alt="img"></p><p>Visual Studio 安装程序</p><ol start="2"><li>在<strong>已安装</strong>选项卡下，单击<strong>修改</strong>，然后选择<strong>单个组件</strong>：</li></ol><p><img src="http://test-fsservice.oss-cn-shanghai.aliyuncs.com/fs/test/2024/202412051445424.png" alt="img"></p><p>Visual Studio 安装程序</p><ol start="3"><li>然后滚动到底部，检查是否安装了 <strong>Windows 11 SDK</strong>，并确认已安装构建工具。</li></ol><p>现在，您可以开始使用 <a href="https://www.graalvm.org/reference-manual/native-image/">GraalVM Native Image</a>。</p><h1 id="第-3-部分。开始在-Windows-上使用-Native-Image"><a href="#第-3-部分。开始在-Windows-上使用-Native-Image" class="headerlink" title="第 3 部分。开始在 Windows 上使用 Native Image"></a>第 3 部分。开始在 Windows 上使用 Native Image</h1><p>如果 Native Image 可以在已知位置找到合适的 Visual Studio 安装，它会自动在 Windows 上设置构建环境。</p><p>由于您已安装 Windows 11 SDK 和 Visual Studio 工具，因此您现在可以在命令提示符 （） 或 PowerShell （） 中运行该实用程序。例如，检查版本：<code>native-image``cmd``pwsh``native-image</code></p><p> C:&gt; native-image.cmd - version</p><p>或者，您可以从 Visual Studio 2022 界面启动 Dev 命令提示符。</p><p>现在让我们尝试一下 Native Image，看看它能做什么！</p><ol><li>将此简单代码保存到 <em>HelloWorld.java</em> 文件中：</li></ol><p> public class HelloWorld {<br>    public static void main(String[] args) {<br>       System.out.println(“Hello, GraalVM Native Image!”);<br>    }<br> }</p><ol start="2"><li>在 JVM 上编译并运行：</li></ol><p> C:&gt; javac HelloWorld<br> C:&gt; java HelloWorld</p><ol start="3"><li>现在将类编译为本机可执行文件：</li></ol><p> C:&gt; native-image HelloWorld</p><p>这将在工作目录中生成一个可执行文件 。<code>helloworld</code></p><ol start="4"><li>现在执行它：</li></ol><p> C:&gt; helloworld    <br> Hello, GraalVM Native Image!</p><p>比较在 JVM 上运行时（步骤 2）和执行 生成的二进制文件时的启动时间（步骤 4）。或者在 <em>PowerShell</em> 中测量时间：<code>native-image</code></p><p> C:&gt; Measure-Command {“.\helloworld”}<br>     <br> Days              : 0<br> Hours             : 0<br> Minutes           : 0<br> Seconds           : 0<br> Milliseconds      : 3<br> Ticks             : 38000<br> TotalDays         : 4.39814814814815E-08<br> TotalHours        : 1.05555555555556E-06<br> TotalMinutes      : 6.33333333333333E-05<br> TotalSeconds      : 0.0038<br> TotalMilliseconds : 3.8</p><p><strong>总结</strong> 在 Windows 上安装 GraalVM 非常简单！请记住，使用 Native Image 有一定的要求。借助 Native Image，您可以充分利用大大增加的启动时间和更小的占用空间来提前编译 Java 应用程序。本指南适用于 Windows 11，但也应适用于 Windows 8 和 10。</p><h2 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a><a href="https://medium.com/graalvm/using-graalvm-and-native-image-on-windows-10-9954dc071311">原文地址</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;合著者：&lt;/em&gt;&lt;a href=&quot;https://medium.com/u/d11b08cee2a4?source=post_page---user_mention--9954dc071311--------------------------------&quot;&gt;&lt;e</summary>
      
    
    
    
    <category term="Java" scheme="https://qbmzc.github.io/categories/Java/"/>
    
    
    <category term="java" scheme="https://qbmzc.github.io/tags/java/"/>
    
    <category term="GraalVM" scheme="https://qbmzc.github.io/tags/GraalVM/"/>
    
    <category term="windows" scheme="https://qbmzc.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>使用 GraalVM 将 Java 代码编译为本地可执行文件</title>
    <link href="https://qbmzc.github.io/2024/11/29/2024/11/301856/"/>
    <id>https://qbmzc.github.io/2024/11/29/2024/11/301856/</id>
    <published>2024-11-29T08:16:00.000Z</published>
    <updated>2025-01-14T10:41:15.106Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <strong>GraalVM</strong> 将 Java 代码编译为本地可执行文件（native executable）可以显著提高启动速度和降低内存消耗。以下是将您提供的从二维码中提取 secret 密钥的 Java 代码使用 GraalVM 编译为可执行命令的详细步骤。<br>  <span id="more"></span></p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ol><li><p><strong>安装 GraalVM</strong>：  </p><ul><li><del>访问 <a href="https://www.graalvm.org/downloads/">GraalVM 官方下载页面</a> 下载适用于您操作系统的 GraalVM 版本。</del>  </li><li><a href="https://bell-sw.com/pages/downloads/native-image-kit/#nik-23-(jdk-21)">DownloadLiberica Native Image Kit</a>  ( <a href="https://github.com/oracle/graal/issues/4124">Mac：java.library.path 中没有 awt 的问题</a>)</li><li>解压缩并设置环境变量 <code>GRAALVM_HOME</code> 指向 GraalVM 安装目录。  </li><li>将 GraalVM 的 <code>bin</code> 目录添加到 <code>PATH</code> 环境变量中。</li></ul></li><li><p><strong>安装 <code>native-image</code> 工具</strong>：  </p><ul><li>GraalVM 默认不包含 <code>native-image</code>，需要通过 <code>gu</code>（GraalVM 的组件管理器）进行安装。  </li><li>执行以下命令安装 <code>native-image</code>：   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">      gu install native-image      </span><br><span class="line">      ```  </span><br><span class="line">3. **确保 Maven 或 Gradle 环境**：  </span><br><span class="line">   - 本教程将使用 Maven 进行构建，因此请确保已安装 Maven 并正确配置环境变量。  </span><br><span class="line">  </span><br><span class="line"><span class="comment">### 步骤一：准备 Java 项目  </span></span><br><span class="line">  </span><br><span class="line">假设您已有一个 Maven 项目，以下是项目的结构和必要的配置。  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#### 1. 创建 Maven 项目  </span></span><br><span class="line">  </span><br><span class="line">如果您还没有项目，可以使用 Maven 创建一个新的项目：  </span><br><span class="line">  </span><br><span class="line">```bash  </span><br><span class="line">mvn archetype:generate -DgroupId=com.cong -DartifactId=QRCodeSecretExtractor -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=<span class="literal">false</span></span><br><span class="line">```  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#### 2. 添加依赖  </span></span><br><span class="line">  </span><br><span class="line">编辑 `pom.xml` 文件，添加 ZXing 库作为依赖：  </span><br><span class="line">  </span><br><span class="line">```xml  </span><br><span class="line"> &lt;!-- ZXing 库 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.4.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;javase&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.4.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">```  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#### 3. 编写 Java 代码  </span></span><br><span class="line">  </span><br><span class="line">在 `src/main/java/com/example` 目录下创建 `QRCodeSecretKeyExtractor.java` 文件，并粘贴以下代码：  </span><br><span class="line">  </span><br><span class="line">```java  </span><br><span class="line">package com.cong;</span><br><span class="line"></span><br><span class="line">import com.google.zxing.*;</span><br><span class="line">import com.google.zxing.client.j2se.BufferedImageLuminanceSource;</span><br><span class="line">import com.google.zxing.common.HybridBinarizer;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.URI;</span><br><span class="line">import java.net.URISyntaxException;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class QRCodeSecretKeyExtractor &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length != 1) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot; QRCodeSecretExtractor qrCodeimage&quot;</span>);</span><br><span class="line">            System.<span class="built_in">exit</span>(1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String qrCodePath = args[0]; // 从命令行参数获取二维码图片路径</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            String qrCodeData = decodeQRCode(new File(qrCodePath));</span><br><span class="line">            <span class="keyword">if</span> (qrCodeData == null) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;未能解码二维码&quot;</span>);</span><br><span class="line">                <span class="built_in">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;QR Code Data: &quot;</span> + qrCodeData);</span><br><span class="line"></span><br><span class="line">            // 根据数据格式解析 secret 密钥</span><br><span class="line">            String secretKey = extractSecretKey(qrCodeData);</span><br><span class="line">            <span class="keyword">if</span> (secretKey != null) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Extracted Secret Key: &quot;</span> + secretKey);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;未能提取到 secret 密钥&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 解码二维码</span><br><span class="line">    private static String decodeQRCode(File qrCodeimage) throws IOException, NotFoundException &#123;</span><br><span class="line">        BufferedImage bufferedImage = ImageIO.<span class="built_in">read</span>(qrCodeimage);</span><br><span class="line">        <span class="keyword">if</span> (bufferedImage == null) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;bufferedImage is null&quot;</span>);</span><br><span class="line">            <span class="built_in">return</span> null;</span><br><span class="line">        &#125;</span><br><span class="line">        LuminanceSource <span class="built_in">source</span> = new BufferedImageLuminanceSource(bufferedImage);</span><br><span class="line">        BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(<span class="built_in">source</span>));</span><br><span class="line"></span><br><span class="line">        Result result = new MultiFormatReader().decode(bitmap);</span><br><span class="line">        <span class="built_in">return</span> result.getText();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 提取 secret 密钥</span><br><span class="line">    private static String extractSecretKey(String qrCodeData) throws URISyntaxException &#123;</span><br><span class="line">        <span class="keyword">if</span> (qrCodeData.startsWith(<span class="string">&quot;otpauth://&quot;</span>)) &#123;</span><br><span class="line">            // 解析 otpauth URI 格式</span><br><span class="line">            <span class="built_in">return</span> parseOTPAuthURI(qrCodeData).get(<span class="string">&quot;secret&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qrCodeData.startsWith(<span class="string">&quot;https://&quot;</span>) || qrCodeData.startsWith(<span class="string">&quot;http://&quot;</span>)) &#123;</span><br><span class="line">            // 处理 URL 格式，可以根据需要实现 HTTP 请求获取 secret</span><br><span class="line">            // 示例中假设 secret 密钥是直接返回的</span><br><span class="line">            // 您可以调用之前提到的 fetchSecretKeyFromURL 方法</span><br><span class="line">            System.out.println(<span class="string">&quot;二维码包含 URL，需要进一步处理&quot;</span>);</span><br><span class="line">            <span class="built_in">return</span> null; // 实际实现中返回从 URL 获取的 secret</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            // 假设是纯文本格式</span><br><span class="line">            <span class="built_in">return</span> qrCodeData;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 解析 otpauth URI</span><br><span class="line">    private static Map&lt;String, String&gt; parseOTPAuthURI(String uriString) throws URISyntaxException &#123;</span><br><span class="line">        URI uri = new URI(uriString);</span><br><span class="line">        String query = uri.getQuery();</span><br><span class="line">        String[] pairs = query.split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">        Map&lt;String, String&gt; queryParams = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String pair : pairs) &#123;</span><br><span class="line">            int idx = pair.indexOf(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (idx &gt; 0 &amp;&amp; idx &lt; pair.length() - 1) &#123;</span><br><span class="line">                String key = pair.substring(0, idx);</span><br><span class="line">                String value = pair.substring(idx + 1);</span><br><span class="line">                queryParams.put(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> queryParams;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">  </span><br><span class="line"><span class="comment">### 步骤二：构建和测试 Java 应用  </span></span><br><span class="line">  </span><br><span class="line">在开始编译为本地可执行文件之前，先确保您的 Java 应用可以正常编译和运行。  </span><br><span class="line">  </span><br><span class="line">1. **编译项目**：  </span><br><span class="line">  </span><br><span class="line">   在项目根目录下执行：  </span><br><span class="line">   ```bash  </span><br><span class="line">   mvn clean package   </span><br><span class="line">   ```  </span><br><span class="line">   这将生成一个 `QRCodeSecretExtractor-1.0-SNAPSHOT.jar` 文件在 `target` 目录中。  </span><br><span class="line">  </span><br><span class="line">2. **运行测试**：  </span><br><span class="line">  </span><br><span class="line">   假设您有一个二维码图片 `qrcode.png`，可以使用以下命令测试：  </span><br><span class="line">  </span><br><span class="line">   ```bash  </span><br><span class="line">   java -jar target/QRCodeSecretExtractor-1.0-SNAPSHOT.jar path/to/qrcode.png   </span><br><span class="line">   ```  </span><br><span class="line">   确保输出正确解析了二维码数据并提取了 secret 密钥。  </span><br><span class="line">  </span><br><span class="line"><span class="comment">### 步骤三：使用 GraalVM 生成本地可执行文件  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#### 1. 设置 GraalVM 作为 Maven 的 JDK  </span></span><br><span class="line">  </span><br><span class="line">确保 Maven 使用 GraalVM 的 JDK 来构建项目。可以通过设置 `JAVA_HOME` 环境变量来实现：  </span><br><span class="line">  </span><br><span class="line">```bash  </span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/path/to/graalvmexport PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">```  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#### 2. 构建可执行 JAR  </span></span><br><span class="line">  </span><br><span class="line">确保您的 `pom.xml` 中配置了 `maven-assembly-plugin` 或 `maven-shade-plugin` 来打包所有依赖到一个可执行的 JAR 文件。以下示例使用 `maven-shade-plugin`：  </span><br><span class="line">  </span><br><span class="line">在 `pom.xml` 中添加以下插件配置：  </span><br><span class="line">  </span><br><span class="line">```xml  </span><br><span class="line">&lt;build&gt;  </span><br><span class="line">    &lt;plugins&gt;        &lt;!-- 其他插件 --&gt;  </span><br><span class="line">        &lt;plugin&gt;            </span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;groupId&gt;            &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;            &lt;version&gt;3.2.4&lt;/version&gt;            &lt;executions&gt;                </span><br><span class="line">        &lt;execution&gt;                    </span><br><span class="line">        &lt;phase&gt;package&lt;/phase&gt;                    &lt;goals&gt;                        </span><br><span class="line">        &lt;goal&gt;shade&lt;/goal&gt;                    &lt;goals&gt;                    &lt;configuration&gt;                        &lt;transformers&gt;                            </span><br><span class="line">        &lt;transformer implementation=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;                                &lt;mainClass&gt;com.cong.QRCodeSecretKeyExtractor</span><br><span class="line">        &lt;/mainClass&gt;                            </span><br><span class="line">        &lt;/transformer&gt;                        </span><br><span class="line">        &lt;/transformers&gt;                    </span><br><span class="line">        &lt;/configuration&gt;                </span><br><span class="line">        &lt;/execution&gt;            </span><br><span class="line">        &lt;/executions&gt;        </span><br><span class="line">      &lt;/plugin&gt;    </span><br><span class="line">   &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;  </span><br><span class="line">```  </span><br><span class="line">  </span><br><span class="line">重新打包项目：  </span><br><span class="line">  </span><br><span class="line">```bash  </span><br><span class="line">mvn clean package</span><br><span class="line">```  </span><br><span class="line">  </span><br><span class="line">这将生成一个包含所有依赖的可执行 JAR 文件，通常命名为 `QRCodeSecretExtractor-1.0-SNAPSHOT-shaded.jar`。  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#### 3. 生成本地可执行文件  </span></span><br><span class="line">  </span><br><span class="line">使用 `native-image` 工具将可执行 JAR 转换为本地可执行文件。  </span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">native-image -jar target/QRCodeSecretExtractor-1.0-SNAPSHOT-shaded.jar QRCodeSecretExtractor</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><strong>说明</strong>：  </p><ul><li><code>-jar</code>：指定要转换的 JAR 文件。  </li><li><code>QRCodeSecretExtractor</code>：指定生成的本地可执行文件的名称。</li></ul><p><strong>注意事项</strong>：  </p><ul><li><strong>静态初始化</strong>：GraalVM 的 <code>native-image</code> 对反射、动态类加载等有一些限制。确保您的代码不依赖于这些特性，或者为它们提供相应的配置。  </li><li><strong>资源文件</strong>：如果您的应用使用了资源文件，可能需要在构建命令中指定资源目录。  </li><li><strong>类路径</strong>：确保所有依赖库都包含在 JAR 文件中（通过 <code>maven-shade-plugin</code> 已处理）。</li></ul><h4 id="4-运行本地可执行文件"><a href="#4-运行本地可执行文件" class="headerlink" title="4. 运行本地可执行文件"></a>4. 运行本地可执行文件</h4><p>生成的可执行文件将在当前目录下，命名为 <code>QRCodeSecretExtractor</code>（在 Linux 和 macOS 上）或 <code>QRCodeSecretExtractor.exe</code>（在 Windows 上）。  </p><pre><code class="bash">./QRCodeSecretExtractor path/to/qrcode.png</code></pre><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><p>以下是整个过程的总结：  </p><ol><li><strong>项目结构</strong>：</li></ol><pre><code>QRCodeSecretExtractor/  ├── pom.xml  └── src/      └── main/              └── java/                     └── com/                            └── cong/                                   └── QRCodeSecretKeyExtractor.java</code></pre><ol start="2"><li><strong><code>pom.xml</code> 配置</strong>：</li></ol><pre><code class="xml">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;com.cong&lt;/groupId&gt;  &lt;artifactId&gt;QRCodeSecretExtractor&lt;/artifactId&gt;  &lt;packaging&gt;jar&lt;/packaging&gt;  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;  &lt;name&gt;QRCodeSecretExtractor&lt;/name&gt;  &lt;url&gt;http://maven.apache.org&lt;/url&gt;  &lt;properties&gt;    &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt; &lt;!-- 使用 GraalVM 支持的 Java 版本 --&gt;    &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;  &lt;/properties&gt;  &lt;dependencies&gt;    &lt;!-- ZXing 库 --&gt;    &lt;dependency&gt;      &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;      &lt;artifactId&gt;core&lt;/artifactId&gt;      &lt;version&gt;3.4.1&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;      &lt;artifactId&gt;javase&lt;/artifactId&gt;      &lt;version&gt;3.4.1&lt;/version&gt;    &lt;/dependency&gt;  &lt;/dependencies&gt;  &lt;build&gt;    &lt;plugins&gt;      &lt;!-- 其他插件 --&gt;      &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;        &lt;version&gt;3.2.4&lt;/version&gt;        &lt;executions&gt;          &lt;execution&gt;            &lt;phase&gt;package&lt;/phase&gt;            &lt;goals&gt;              &lt;goal&gt;shade&lt;/goal&gt;            &lt;/goals&gt;            &lt;configuration&gt;              &lt;transformers&gt;                &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;                  &lt;mainClass&gt;com.cong.QRCodeSecretKeyExtractor&lt;/mainClass&gt;                &lt;/transformer&gt;              &lt;/transformers&gt;            &lt;/configuration&gt;          &lt;/execution&gt;        &lt;/executions&gt;      &lt;/plugin&gt;    &lt;/plugins&gt;  &lt;/build&gt;  &lt;profiles&gt;    &lt;profile&gt;      &lt;id&gt;native&lt;/id&gt;      &lt;build&gt;        &lt;plugins&gt;          &lt;plugin&gt;            &lt;groupId&gt;org.graalvm.buildtools&lt;/groupId&gt;            &lt;artifactId&gt;native-maven-plugin&lt;/artifactId&gt;            &lt;executions&gt;              &lt;execution&gt;                &lt;id&gt;build-native&lt;/id&gt;                &lt;goals&gt;                  &lt;goal&gt;compile-no-fork&lt;/goal&gt;                &lt;/goals&gt;                &lt;phase&gt;package&lt;/phase&gt;              &lt;/execution&gt;            &lt;/executions&gt;          &lt;/plugin&gt;        &lt;/plugins&gt;      &lt;/build&gt;    &lt;/profile&gt;  &lt;/profiles&gt;&lt;/project&gt; </code></pre><ol start="3"><li><p><strong>编写 Java 代码</strong>：如上所述。  </p></li><li><p><strong>构建和生成本地可执行文件</strong>：</p></li></ol><pre><code class="bash"># 设置 JAVA_HOME 指向 GraalVMexport JAVA_HOME=/path/to/graalvm  export PATH=$JAVA_HOME/bin:$PATH    # 构建项目  mvn clean package    # 生成本地可执行文件  native-image -jar target/QRCodeSecretExtractor-1.0-SNAPSHOT-shaded.jar QRCodeSecretExtractor  </code></pre><ol start="5"><li><strong>运行可执行文件</strong>：</li></ol><pre><code class="bash">./QRCodeSecretExtractor path/to/qrcode.png</code></pre><h3 id="可能遇到的问题及解决方案"><a href="#可能遇到的问题及解决方案" class="headerlink" title="可能遇到的问题及解决方案"></a>可能遇到的问题及解决方案</h3><ol><li><p><strong>缺少依赖或资源</strong>：  </p><ul><li>确保所有依赖库已正确打包在可执行 JAR 中。使用 <code>maven-shade-plugin</code> 可以帮助解决这个问题。</li></ul></li><li><p><strong>反射和动态加载问题</strong>：  </p><ul><li>如果您的应用使用了反射，可能需要为 <code>native-image</code> 提供配置文件。例如，使用 <code>--initialize-at-build-time</code> 选项或创建一个 <code>reflect-config.json</code> 文件。</li></ul></li><li><p><strong>性能问题</strong>：  </p><ul><li>本地可执行文件在启动速度和运行性能上通常优于 JVM 运行，但编译时间较长。根据需要调整 <code>native-image</code> 的选项以优化性能。</li></ul></li><li><p><strong>跨平台兼容性</strong>：  </p><ul><li>本地可执行文件是针对特定操作系统和架构生成的。确保在目标平台上生成和运行可执行文件。</li></ul></li></ol><h3 id="额外优化建议"><a href="#额外优化建议" class="headerlink" title="额外优化建议"></a>额外优化建议</h3><ul><li><p><strong>减少镜像大小</strong>：  </p><ul><li>使用 <code>-H:IncludeResources</code> 和 <code>-H:ExcludeResources</code> 选项来控制包含在镜像中的资源。</li></ul></li><li><p><strong>优化启动时间</strong>：  </p><ul><li>使用 <code>--no-fallback</code> 选项来移除 JVM 备份，以减少镜像大小和启动时间。</li></ul></li><li><p><strong>配置日志和输出</strong>：  </p><ul><li>根据需要调整日志输出，避免在生产环境中输出敏感信息。</li></ul></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.graalvm.org/docs/">GraalVM 官方文档</a>  </li><li><a href="https://www.graalvm.org/docs/reference-manual/native-image/">GraalVM Native Image User Guide</a>  </li><li><a href="https://github.com/zxing/zxing">ZXing 项目主页</a></li></ul><p>通过以上步骤，您可以将 Java 代码使用 GraalVM 编译为高效的本地可执行文件，并在无需 JVM 环境的情况下运行该程序。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 &lt;strong&gt;GraalVM&lt;/strong&gt; 将 Java 代码编译为本地可执行文件（native executable）可以显著提高启动速度和降低内存消耗。以下是将您提供的从二维码中提取 secret 密钥的 Java 代码使用 GraalVM 编译为可执行命令的详细步骤。&lt;br&gt;</summary>
    
    
    
    <category term="Java" scheme="https://qbmzc.github.io/categories/Java/"/>
    
    
    <category term="GraalVM" scheme="https://qbmzc.github.io/tags/GraalVM/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg转换多种视频流</title>
    <link href="https://qbmzc.github.io/2024/11/28/2024/11/281121/"/>
    <id>https://qbmzc.github.io/2024/11/28/2024/11/281121/</id>
    <published>2024-11-27T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.106Z</updated>
    
    <content type="html"><![CDATA[<p>ffmpeg转换多种视频流</p><span id="more"></span><h2 id="GPU-Hardware-Acceleration"><a href="#GPU-Hardware-Acceleration" class="headerlink" title="GPU Hardware Acceleration"></a>GPU Hardware Acceleration</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -hide_banner -y -hwaccel cuda -hwaccel_output_format cuda -c:v h264_cuvid -err_detect ignore_err -fflags +discardcorrupt -i /tmp/hls/8a8d85ec8e45f96f019362dde66e1615 \</span><br><span class="line">-filter_complex <span class="string">&quot;[0:v]split=3[v1080][v720][v480]; \</span></span><br><span class="line"><span class="string">[v1080]scale_cuda=1920:1080,setsar=1[vid1080]; \</span></span><br><span class="line"><span class="string">[v720]scale_cuda=1280:720,setsar=1[vid720]; \</span></span><br><span class="line"><span class="string">[v480]scale_cuda=720:480,setsar=1[vid480]&quot;</span> \</span><br><span class="line">-map <span class="string">&quot;[vid1080]&quot;</span> -c:v h264_nvenc -b:v 5M -c:a aac -f hls -hls_list_size 0 \</span><br><span class="line">/data/upload/resources/hls/8a8d85ec8e45f96f019362dde66e1615/8a8d85ec8e45f96f019362dde66e1615_1080p.m3u8 \</span><br><span class="line">-map <span class="string">&quot;[vid720]&quot;</span> -c:v h264_nvenc -b:v 3M -c:a aac -f hls -hls_list_size 0 \</span><br><span class="line">/data/upload/resources/hls/8a8d85ec8e45f96f019362dde66e1615/8a8d85ec8e45f96f019362dde66e1615_720p.m3u8 \</span><br><span class="line">-map <span class="string">&quot;[vid480]&quot;</span> -c:v h264_nvenc -b:v 1.5M -c:a aac -f hls -hls_list_size 0 \</span><br><span class="line">/data/upload/resources/hls/8a8d85ec8e45f96f019362dde66e1615/8a8d85ec8e45f96f019362dde66e1615_480p.m3u8</span><br></pre></td></tr></table></figure><h2 id="CPU-Hardware-Acceleration"><a href="#CPU-Hardware-Acceleration" class="headerlink" title="CPU Hardware Acceleration"></a>CPU Hardware Acceleration</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -hide_banner -y -err_detect ignore_err -fflags +discardcorrupt -i 8a8d85ec8e45f96f019362dde66e1615.mp4 \</span><br><span class="line">-filter_complex <span class="string">&quot;[0:v]split=3[v1080][v720][v480]; \</span></span><br><span class="line"><span class="string">[v1080]scale=1920:1080,setsar=1[vid1080]; \</span></span><br><span class="line"><span class="string">[v720]scale=1280:720,setsar=1[vid720]; \</span></span><br><span class="line"><span class="string">[v480]scale=720:480,setsar=1[vid480]&quot;</span> \</span><br><span class="line">-map <span class="string">&quot;[vid1080]&quot;</span> -c:v libx264 -b:v 5M -c:a aac -f hls -hls_list_size 0 \</span><br><span class="line">./8a8d85ec8e45f96f019362dde66e1615/8a8d85ec8e45f96f019362dde66e1615_1080p.m3u8 \</span><br><span class="line">-map <span class="string">&quot;[vid720]&quot;</span> -c:v libx264 -b:v 3M -c:a aac -f hls -hls_list_size 0 \</span><br><span class="line">./8a8d85ec8e45f96f019362dde66e1615/8a8d85ec8e45f96f019362dde66e1615_720p.m3u8 \</span><br><span class="line">-map <span class="string">&quot;[vid480]&quot;</span> -c:v libx264 -b:v 1.5M -c:a aac -f hls -hls_list_size 0 \</span><br><span class="line">./8a8d85ec8e45f96f019362dde66e1615/8a8d85ec8e45f96f019362dde66e1615_480p.m3u8</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;ffmpeg转换多种视频流&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://qbmzc.github.io/categories/Linux/"/>
    
    
    <category term="ffmpeg" scheme="https://qbmzc.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg批量转换音频到mp3格式</title>
    <link href="https://qbmzc.github.io/2024/11/06/2024/11/060958/"/>
    <id>https://qbmzc.github.io/2024/11/06/2024/11/060958/</id>
    <published>2024-11-05T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.106Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>ffmpeg</code> 批量转换音频文件到 MP3 格式是一个常见的任务，可以通过编写一个简单的脚本来实现。以下是在不同操作系统中实现这一任务的方法。</p><span id="more"></span><h3 id="在-Linux-或-macOS-上"><a href="#在-Linux-或-macOS-上" class="headerlink" title="在 Linux 或 macOS 上"></a>在 Linux 或 macOS 上</h3><ol><li><p><strong>创建一个 Bash 脚本</strong>：<br>创建一个名为 <code>convert_to_mp3.sh</code> 的文件，并在其中编写以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否提供了目录参数</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> &lt;directory&gt;&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取目录路径</span></span><br><span class="line">DIR=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历目录中的所有音频文件</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$DIR</span>&quot;</span>/*.&#123;wav,flac,aac,ogg,m4a&#125;; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$file</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 获取文件名和扩展名</span></span><br><span class="line">    filename=$(<span class="built_in">basename</span> -- <span class="string">&quot;<span class="variable">$file</span>&quot;</span>)</span><br><span class="line">    extension=<span class="string">&quot;<span class="variable">$&#123;filename##*.&#125;</span>&quot;</span></span><br><span class="line">    filename=<span class="string">&quot;<span class="variable">$&#123;filename%.*&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换为 MP3</span></span><br><span class="line">    ffmpeg -i <span class="string">&quot;<span class="variable">$file</span>&quot;</span> -vn -ar 44100 -ac 2 -ab 192k -f mp3 <span class="string">&quot;<span class="variable">$DIR</span>/<span class="variable">$filename</span>.mp3&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Converted <span class="variable">$file</span> to <span class="variable">$DIR</span>/<span class="variable">$filename</span>.mp3&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li><li><p><strong>赋予脚本执行权限</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x convert_to_mp3.sh</span><br></pre></td></tr></table></figure></li><li><p><strong>运行脚本</strong>：<br>将你的音频文件放在一个目录中，然后运行脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./convert_to_mp3.sh /path/to/your/audio/files</span><br></pre></td></tr></table></figure></li></ol><h3 id="在-Windows-上"><a href="#在-Windows-上" class="headerlink" title="在 Windows 上"></a>在 Windows 上</h3><ol><li><p><strong>创建一个批处理文件</strong>：<br>创建一个名为 <code>convert_to_mp3.bat</code> 的文件，并在其中编写以下内容：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> &quot;%~<span class="number">1</span>&quot;==&quot;&quot; (</span><br><span class="line">  <span class="built_in">echo</span> Usage: %<span class="number">0</span> ^&lt;directory^&gt;</span><br><span class="line">  <span class="keyword">exit</span> /b <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">DIR</span>=%<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%f</span> <span class="keyword">in</span> (&quot;<span class="variable">%DIR%</span>\*.wav&quot; &quot;<span class="variable">%DIR%</span>\*.flac&quot; &quot;<span class="variable">%DIR%</span>\*.aac&quot; &quot;<span class="variable">%DIR%</span>\*.ogg&quot; &quot;<span class="variable">%DIR%</span>\*.m4a&quot;) <span class="keyword">do</span> (</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">exist</span> &quot;<span class="variable">%%f</span>&quot; (</span><br><span class="line">    <span class="built_in">set</span> &quot;filename=<span class="variable">%%~</span>nf&quot;</span><br><span class="line">    <span class="built_in">set</span> &quot;extension=<span class="variable">%%~</span>xf&quot;</span><br><span class="line">    ffmpeg -i &quot;<span class="variable">%%f</span>&quot; -vn -ar <span class="number">44100</span> -ac <span class="number">2</span> -ab <span class="number">192</span>k -f mp3 &quot;<span class="variable">%DIR%</span>\<span class="variable">!filename!</span>.mp3&quot;</span><br><span class="line">    <span class="built_in">echo</span> Converted <span class="variable">%%f</span> to <span class="variable">%DIR%</span>\<span class="variable">!filename!</span>.mp3</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p><strong>运行批处理文件</strong>：<br>将你的音频文件放在一个目录中，然后运行批处理文件：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert_to_mp3.bat C:\<span class="built_in">path</span>\to\your\audio\files</span><br></pre></td></tr></table></figure></li></ol><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul><li>**<code>ffmpeg -i &quot;$file&quot; -vn -ar 44100 -ac 2 -ab 192k -f mp3 &quot;$DIR/$filename.mp3&quot;</code>**：<ul><li><code>-i &quot;$file&quot;</code>：指定输入文件。</li><li><code>-vn</code>：不包含视频流。</li><li><code>-ar 44100</code>：设置音频采样率为 44.1 kHz。</li><li><code>-ac 2</code>：设置音频通道数为 2（立体声）。</li><li><code>-ab 192k</code>：设置音频比特率为 192 kbps。</li><li><code>-f mp3</code>：指定输出格式为 MP3。</li><li><code>&quot;$DIR/$filename.mp3&quot;</code>：指定输出文件名。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 &lt;code&gt;ffmpeg&lt;/code&gt; 批量转换音频文件到 MP3 格式是一个常见的任务，可以通过编写一个简单的脚本来实现。以下是在不同操作系统中实现这一任务的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://qbmzc.github.io/categories/Linux/"/>
    
    
    <category term="ffmpeg" scheme="https://qbmzc.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>批量重命名</title>
    <link href="https://qbmzc.github.io/2024/11/06/2024/11/061330/"/>
    <id>https://qbmzc.github.io/2024/11/06/2024/11/061330/</id>
    <published>2024-11-05T16:00:00.000Z</published>
    <updated>2025-01-14T10:41:15.106Z</updated>
    
    <content type="html"><![CDATA[<p>批量重命名文件是一个常见的任务，可以通过编写脚本来实现。以下是在不同操作系统中实现批量重命名的方法。</p><span id="more"></span><h3 id="在-Linux-或-macOS-上"><a href="#在-Linux-或-macOS-上" class="headerlink" title="在 Linux 或 macOS 上"></a>在 Linux 或 macOS 上</h3><ol><li><p><strong>创建一个 Bash 脚本</strong>：<br>创建一个名为 <code>rename_files.sh</code> 的文件，并在其中编写以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否提供了目录参数</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> &lt;directory&gt; &lt;new_name_prefix&gt;&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取目录路径和新文件名前缀</span></span><br><span class="line">DIR=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">NEW_NAME_PREFIX=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化计数器</span></span><br><span class="line">COUNT=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历目录中的所有文件</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$DIR</span>&quot;</span>/*; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$file</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 获取文件扩展名</span></span><br><span class="line">    ext=<span class="string">&quot;<span class="variable">$&#123;file##*.&#125;</span>&quot;</span></span><br><span class="line">    <span class="comment"># 构建新文件名</span></span><br><span class="line">    new_file=<span class="string">&quot;<span class="variable">$DIR</span>/<span class="variable">$&#123;NEW_NAME_PREFIX&#125;</span>_<span class="variable">$COUNT</span>.<span class="variable">$ext</span>&quot;</span></span><br><span class="line">    <span class="comment"># 重命名文件</span></span><br><span class="line">    <span class="built_in">mv</span> <span class="string">&quot;<span class="variable">$file</span>&quot;</span> <span class="string">&quot;<span class="variable">$new_file</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Renamed <span class="variable">$file</span> to <span class="variable">$new_file</span>&quot;</span></span><br><span class="line">    <span class="comment"># 增加计数器</span></span><br><span class="line">    ((COUNT++))</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li><li><p><strong>赋予脚本执行权限</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x rename_files.sh</span><br></pre></td></tr></table></figure></li><li><p><strong>运行脚本</strong>：<br>将你的文件放在一个目录中，然后运行脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rename_files.sh /path/to/your/files new_name</span><br></pre></td></tr></table></figure></li></ol><h3 id="在-Windows-上"><a href="#在-Windows-上" class="headerlink" title="在 Windows 上"></a>在 Windows 上</h3><ol><li><p><strong>创建一个批处理文件</strong>：<br>创建一个名为 <code>rename_files.bat</code> 的文件，并在其中编写以下内容：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> &quot;%~<span class="number">1</span>&quot;==&quot;&quot; (</span><br><span class="line">  <span class="built_in">echo</span> Usage: %<span class="number">0</span> ^&lt;directory^&gt; ^&lt;new_name_prefix^&gt;</span><br><span class="line">  <span class="keyword">exit</span> /b <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">DIR</span>=%<span class="number">1</span></span><br><span class="line"><span class="built_in">set</span> NEW_NAME_PREFIX=%<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> COUNT=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%f</span> <span class="keyword">in</span> (&quot;<span class="variable">%DIR%</span>\*&quot;) <span class="keyword">do</span> (</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">exist</span> &quot;<span class="variable">%%f</span>&quot; (</span><br><span class="line">    <span class="built_in">set</span> &quot;ext=<span class="variable">%%~</span>xf&quot;</span><br><span class="line">    <span class="built_in">set</span> &quot;new_file=<span class="variable">%DIR%</span>\<span class="variable">%NEW_NAME_PREFIX%</span>_<span class="variable">!COUNT!</span><span class="variable">!ext!</span>&quot;</span><br><span class="line">    <span class="built_in">ren</span> &quot;<span class="variable">%%f</span>&quot; &quot;<span class="variable">!new_file!</span>&quot;</span><br><span class="line">    <span class="built_in">echo</span> Renamed <span class="variable">%%f</span> to <span class="variable">!new_file!</span></span><br><span class="line">    <span class="built_in">set</span> /a COUNT+=<span class="number">1</span></span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p><strong>运行批处理文件</strong>：<br>将你的文件放在一个目录中，然后运行批处理文件：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename_files.bat C:\<span class="built_in">path</span>\to\your\files new_name</span><br></pre></td></tr></table></figure></li></ol><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul><li><strong><code>for file in &quot;$DIR&quot;/*</code></strong> 和 **<code>for %%f in (&quot;%DIR%\*&quot;)</code>**：遍历指定目录中的所有文件。</li><li><strong><code>if [ -f &quot;$file&quot; ]</code></strong> 和 **<code>if exist &quot;%%f&quot;</code>**：检查文件是否存在并且是普通文件。</li><li><strong><code>ext=&quot;$&#123;file##*.&#125;&quot;</code></strong> 和 **<code>set &quot;ext=%%~xf&quot;</code>**：获取文件扩展名。</li><li><strong><code>new_file=&quot;$DIR/$&#123;NEW_NAME_PREFIX&#125;_$COUNT.$ext&quot;</code></strong> 和 **<code>set &quot;new_file=%DIR%\%NEW_NAME_PREFIX%_!COUNT!!ext!&quot;</code>**：构建新文件名。</li><li><strong><code>mv &quot;$file&quot; &quot;$new_file&quot;</code></strong> 和 **<code>ren &quot;%%f&quot; &quot;!new_file!&quot;</code>**：重命名文件。</li><li><strong><code>((COUNT++))</code></strong> 和 **<code>set /a COUNT+=1</code>**：增加计数器。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;批量重命名文件是一个常见的任务，可以通过编写脚本来实现。以下是在不同操作系统中实现批量重命名的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://qbmzc.github.io/categories/Linux/"/>
    
    
    <category term="shell" scheme="https://qbmzc.github.io/tags/shell/"/>
    
  </entry>
  
</feed>
